{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the Chaos Toolkit!\n\u00b6\n\n\n\n\n\nThe Chaos Toolkit Workflow: \ndiscover\n -> \n\ninit\n -> \nrun\n -> \n\nreport\n\n\nThe Chaos Toolkit aims to be the simplest and easiest way to explore building \nyour own \nChaos Engineering\n Experiments. It \nalso aims to define a vendor and technology independent way of specifying \nChaos Engineering experiments by providing an \n\nOpen API\n.\n\n\nThe Chaos Toolkit provides a \nCLI\n that can be used \nto execute the \ndiscover\n -> \n\ninit\n -> \nrun\n -> \n\nreport\n \n\nChaos Engineering workflow\n.\n\n\n\n\nNew to Chaos Engineering\n - A useful set of links and \nreference materials if you\u2019re new to Chaos Engineering.\n\n\nGetting Started with the Tutorials\n - Get started quickly \nwith the online, interactive Chaos Toolkit tutorials.\n\n\nExplore Specific Use Cases\n - Explore deeper, \nspecific  use case examples of using the Chaos Toolkit.\n\n\nExplore Third Party and Commercial Integrations\n - Explore \nthe growing list of third party ope, free and commercial Chaos Toolkit integrations.\n\n\nContributing to the Chaos Toolkit\n - There are lots of ways \nto contribute to the free and open source Chaos Toolkit projects. Start to get involved here.\n\n\nFAQ\n - Frequently asked questions about the toolkit.\n\n\nReference\n - Reference documentation for when \nyou\u2019re building your own chaos engineering experiments.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-chaos-toolkit",
            "text": "The Chaos Toolkit Workflow:  discover  ->  init  ->  run  ->  report  The Chaos Toolkit aims to be the simplest and easiest way to explore building \nyour own  Chaos Engineering  Experiments. It \nalso aims to define a vendor and technology independent way of specifying \nChaos Engineering experiments by providing an  Open API .  The Chaos Toolkit provides a  CLI  that can be used \nto execute the  discover  ->  init  ->  run  ->  report   Chaos Engineering workflow .   New to Chaos Engineering  - A useful set of links and \nreference materials if you\u2019re new to Chaos Engineering.  Getting Started with the Tutorials  - Get started quickly \nwith the online, interactive Chaos Toolkit tutorials.  Explore Specific Use Cases  - Explore deeper, \nspecific  use case examples of using the Chaos Toolkit.  Explore Third Party and Commercial Integrations  - Explore \nthe growing list of third party ope, free and commercial Chaos Toolkit integrations.  Contributing to the Chaos Toolkit  - There are lots of ways \nto contribute to the free and open source Chaos Toolkit projects. Start to get involved here.  FAQ  - Frequently asked questions about the toolkit.  Reference  - Reference documentation for when \nyou\u2019re building your own chaos engineering experiments.",
            "title": "Welcome to the Chaos Toolkit!"
        },
        {
            "location": "/new-to-chaos/",
            "text": "If you\u2019re new to Chaos Engineering and want to get up-to-speed on the concept quickly we recommend reading the following:\n\n\n\n\nDownload the free, \nChaos Engineering eBook\n\n\nUnderstanding the importance of the Chaos Engineering terms in this \ndiscussion of the term by Russ  Miles\n\n\nHow to explain Chaos Engineering effectively to your colleagues and non-technical stakeholders\n\n\nHow to decide you are ready to begin using Chaos Engineering on your own systems\n\n\n\n\nChaos engineering helps you build \nconfidence in your system\u2019s availability\n using experiments to explore and discover the unknown weaknesses within those systems.",
            "title": "New to Chaos Engineering"
        },
        {
            "location": "/getting-started/",
            "text": "The best way to quickly explore using the Chaos Toolkit is to work through the \nGetting Started section of our free online tutorials\n, available thanks to the excellent \nKatacoda\n system. \n\n\nThese \nGetting Started tutorials\n show you how to install the Chaos Toolkit and how to use the \nChaos Toolkit\u2019s Workflow\n to \ndiscover\n and \ninit\n to bootstrap your own experiments, so that you can then \nrun\n them in order to produce a \nreport\n that you and your teams can learn from as you aim to improve your system.",
            "title": "Getting Started with the Tutorials"
        },
        {
            "location": "/explore-specific-cases/",
            "text": "Once you\u2019re familiar with the basics of the Chaos Toolkit\u2019s Workflow you can begin to explore how this can be applied to specific targets through further tutorials:\n\n\n\n\nApplying Chaos Engineering to Cloud Native Microservices on Kubernetes",
            "title": "Explore Specific Use Cases"
        },
        {
            "location": "/integrations/",
            "text": "The Chaos Toolkit uses a number of third-party integrations to probe and act upon\nyour systems. Some of these integrations are commercial and there is a growing \ncatalogue of \nonline tutorials around these integrations as well\n.",
            "title": "Explore Third Party and Commercial Integrations"
        },
        {
            "location": "/contributing/",
            "text": "The Chaos Toolkit is a free and open source tool \nand\n a \ncommunity-driven \nset of projects\n. The \ncommunity\u2019s input is what makes this project special and a success. \n\n\nYour input could take the form of \nraising issues\n, \nvoting for issues\n, \n\nstarring projects\n, \njoining us on our \ncommunity Slack team\n, \nsubmitting pull requests\n, or even \nsuggesting whole new extension projects\n. \n\n\nWhatever you can contribute, \nwe\u2019re listening and want you to help us drive the \nproject forward\n.\n\n\nThe Chaos Toolkit Incubator\n\u00b6\n\n\nNew potential projects should be first incubated in the \n\nChaos Toolkit Incubator\n until they \nare ready to be moved into the main \n\nChaos Toolkit suite of projects\n. \nConditions for graduating a project from the Incubator to the main suite of \nprojects include:\n\n\n\n\nCorrect Licensing and Certification of Origin.\n\n\nA popular starred and used extension to the Chaos Toolkit.\n\n\nActive and prompt project issue resolution.\n\n\n\n\nLicensing and Certification of Origin\n\u00b6\n\n\nEvery project in the Chaos Toolkit and the Chaos Toolkit Incubator is licensed \nunder the \nApache License, Version 2.0\n and abides by the \nDeveloper Certificate of Origin\n on all accepted commits to the \nmaster\n branch.",
            "title": "Contributing to the Chaos Toolkit"
        },
        {
            "location": "/contributing/#the-chaos-toolkit-incubator",
            "text": "New potential projects should be first incubated in the  Chaos Toolkit Incubator  until they \nare ready to be moved into the main  Chaos Toolkit suite of projects . \nConditions for graduating a project from the Incubator to the main suite of \nprojects include:   Correct Licensing and Certification of Origin.  A popular starred and used extension to the Chaos Toolkit.  Active and prompt project issue resolution.",
            "title": "The Chaos Toolkit Incubator"
        },
        {
            "location": "/contributing/#licensing-and-certification-of-origin",
            "text": "Every project in the Chaos Toolkit and the Chaos Toolkit Incubator is licensed \nunder the  Apache License, Version 2.0  and abides by the  Developer Certificate of Origin  on all accepted commits to the  master  branch.",
            "title": "Licensing and Certification of Origin"
        },
        {
            "location": "/contributors/",
            "text": "The Chaos Toolkit is a community-driven, free and open source collection \nof core projects that are gratefully contributed to by:\n\n\n\n\nChaos Toolkit\n\n\nChaos Toolkit Library\n\n\nChaos Toolkit Reporting\n\n\nChaos Toolkit Documentation\n\n\nChaos Toolkit Tutorials\n\n\n\n\nThe Chaos Toolkit is also sponsored by the following:\n\n\n\n\nChaosIQ.io\n - \nChaosIQ\n \nprovides expert \ntraining\n, \n\nconsultancy\n and \n\nproducts\n to help you \nsuccessfully get the advantages of Chaos Engineering in your own organisations.",
            "title": "Contributors & Sponsors"
        },
        {
            "location": "/faq/",
            "text": "What is the Chaos Toolkit?\n\u00b6\n\n\nIt is an open-source software that runs an experiment against your system to\nconfirm or infirm an hypothesis. Colloquially this refers to the \nC\nhaos Engineering Principles\n.\n\n\nWhy do I need to run experiments?\n\u00b6\n\n\nSystems do not live in a vacuum, they are subjected to real world events, some\nexpected and tolerated, others considered as attacks. Waiting for those\nconditions arise does not give the time your team needs to handle, learn and\nadapt to the situation at hand.\n\n\nIn many countries, fire alarm tests are conducted at random in offices so \npeople learn how to react well for the benefit of everyone. Software systems\nshould go through the same exercises. The Chaos Toolkit hopes to make it \nsimple and safe to run experiments like these.\n\n\nEngaging the team and organisation\n\u00b6\n\n\nChaos engineering aims at making you learn from your system. This is not a lone\nactivity but a team, potentially the whole organisation, endeavour.\n\n\nIndeed, a hypothesis you could set the hypothesis \u201cwe have been hacked and lost\nusers sensitive data, we should issue a statement we are doing everything to\nfix the problem within 15mn\u201d. This experiment is not really technical but\norganisational: is the chain of information and command working effectively?\n\n\nIsn\u2019t it testing?\n\u00b6\n\n\nWe do not consider testing and chaos engineering to conflict with each other.\nThey both provide useful and actionable feedback. Where they differ is their\nobjective. \n\n\nTesting is a process that aims at telling you if your application,\nwithin controlled boundaries, runs as expected. \n\n\nChaos engineering is a displine of posing a hypothesis before collecting\nevidence to reject or accept that hypothesis.\n\n\nA test is sort of an hypothesis in its own. The difference lies in the\nexperimental approach of the chaos engineering displine. It asks a question and\nthen observe the system to see if we can answer that question positively or\nnegatively.\n\n\nIncidentaly, some forms of testing are not too dissmilar to a chaos engineering\nexperiment. Say for instance, you run a load testing. Your hypothesis is that\nresponse time should not be impacted under load. By running your experiment,\nyou may answer that question.\n\n\nIsn\u2019t it monitoring?\n\u00b6\n\n\nMuch like chaos engineering is not testing, it should not be conflated with\nmonitoring. If anything, chaos engineering strives for good monitoring for it\nhelps observing the system during the experiment.\n\n\nMonitoring surfaces, informs and may even react to confitions in your system.\nBut this is not answering a question like chaos engineering tries to do.\n\n\nWhy a toolkit?\n\u00b6\n\n\nCurrently, running experiments is not an easy task because the ecosystem is \nstill fairly young. Complex cases have been demonstrated at large corporations\nsuch as Netflix or LinkedIn. Tools such as \nChAP\n or \nSimoorg\n\nare powerful but quite involved.\n\n\nThe Chaos Toolkit aims at providing a more straightforward initial user\nexperience to gain confidence in doing Chaos Engineering experiments. The\nsimpler it gets the greater our cognitive capacity to understand what is going\non.\n\n\nUltimately, the Chaos Toolkit should lead you on the path to using richer tools\nsuch as those cited above.\n\n\nWhat does the Chaos Toolkit do?\n\u00b6\n\n\nThe Chaos Toolkit user-interface is a command line that takes a JSON-encoded\nfile describing the experiment to run. It consists of a sequence of activities\nthe toolkit executes in order to produce a final report. \n\n\nThe activities are of two kinds. Probes observe the system at various point of\nthe experiment. Actions interact with the system to change its state. Usually\nthe action represents the hypothesis you are trying to learn from.\n\n\nWho is behind the Chaos Toolkit?\n\u00b6\n\n\nThe effort was initiated by \nRuss Miles\n and\n\nSylvain Hellegouarch\n, two engineers passionate about fluidity in\ncomplex systems. However, their vision is really to build a\n\nstrong community\n of engineer experiences to feedback\ninto the Chaos Toolkit.\n\n\nWhat is the license of the Chaos Toolkit?\n\u00b6\n\n\nApache 2.0\n.\n\n\nHow can I contribute?\n\u00b6\n\n\nThe Chaos Toolkit welcomes contributors! To help the project, please go to\nthe right project on \nGitHub\n and create an issue. If you feel like it,\ndo not hesitate to fork the repository, make a change and submit a \npull-request to the upstream project for review.",
            "title": "FAQ"
        },
        {
            "location": "/faq/#what-is-the-chaos-toolkit",
            "text": "It is an open-source software that runs an experiment against your system to\nconfirm or infirm an hypothesis. Colloquially this refers to the \nC haos Engineering Principles .",
            "title": "What is the Chaos Toolkit?"
        },
        {
            "location": "/faq/#why-do-i-need-to-run-experiments",
            "text": "Systems do not live in a vacuum, they are subjected to real world events, some\nexpected and tolerated, others considered as attacks. Waiting for those\nconditions arise does not give the time your team needs to handle, learn and\nadapt to the situation at hand.  In many countries, fire alarm tests are conducted at random in offices so \npeople learn how to react well for the benefit of everyone. Software systems\nshould go through the same exercises. The Chaos Toolkit hopes to make it \nsimple and safe to run experiments like these.",
            "title": "Why do I need to run experiments?"
        },
        {
            "location": "/faq/#engaging-the-team-and-organisation",
            "text": "Chaos engineering aims at making you learn from your system. This is not a lone\nactivity but a team, potentially the whole organisation, endeavour.  Indeed, a hypothesis you could set the hypothesis \u201cwe have been hacked and lost\nusers sensitive data, we should issue a statement we are doing everything to\nfix the problem within 15mn\u201d. This experiment is not really technical but\norganisational: is the chain of information and command working effectively?",
            "title": "Engaging the team and organisation"
        },
        {
            "location": "/faq/#isnt-it-testing",
            "text": "We do not consider testing and chaos engineering to conflict with each other.\nThey both provide useful and actionable feedback. Where they differ is their\nobjective.   Testing is a process that aims at telling you if your application,\nwithin controlled boundaries, runs as expected.   Chaos engineering is a displine of posing a hypothesis before collecting\nevidence to reject or accept that hypothesis.  A test is sort of an hypothesis in its own. The difference lies in the\nexperimental approach of the chaos engineering displine. It asks a question and\nthen observe the system to see if we can answer that question positively or\nnegatively.  Incidentaly, some forms of testing are not too dissmilar to a chaos engineering\nexperiment. Say for instance, you run a load testing. Your hypothesis is that\nresponse time should not be impacted under load. By running your experiment,\nyou may answer that question.",
            "title": "Isn't it testing?"
        },
        {
            "location": "/faq/#isnt-it-monitoring",
            "text": "Much like chaos engineering is not testing, it should not be conflated with\nmonitoring. If anything, chaos engineering strives for good monitoring for it\nhelps observing the system during the experiment.  Monitoring surfaces, informs and may even react to confitions in your system.\nBut this is not answering a question like chaos engineering tries to do.",
            "title": "Isn't it monitoring?"
        },
        {
            "location": "/faq/#why-a-toolkit",
            "text": "Currently, running experiments is not an easy task because the ecosystem is \nstill fairly young. Complex cases have been demonstrated at large corporations\nsuch as Netflix or LinkedIn. Tools such as  ChAP  or  Simoorg \nare powerful but quite involved.  The Chaos Toolkit aims at providing a more straightforward initial user\nexperience to gain confidence in doing Chaos Engineering experiments. The\nsimpler it gets the greater our cognitive capacity to understand what is going\non.  Ultimately, the Chaos Toolkit should lead you on the path to using richer tools\nsuch as those cited above.",
            "title": "Why a toolkit?"
        },
        {
            "location": "/faq/#what-does-the-chaos-toolkit-do",
            "text": "The Chaos Toolkit user-interface is a command line that takes a JSON-encoded\nfile describing the experiment to run. It consists of a sequence of activities\nthe toolkit executes in order to produce a final report.   The activities are of two kinds. Probes observe the system at various point of\nthe experiment. Actions interact with the system to change its state. Usually\nthe action represents the hypothesis you are trying to learn from.",
            "title": "What does the Chaos Toolkit do?"
        },
        {
            "location": "/faq/#who-is-behind-the-chaos-toolkit",
            "text": "The effort was initiated by  Russ Miles  and Sylvain Hellegouarch , two engineers passionate about fluidity in\ncomplex systems. However, their vision is really to build a strong community  of engineer experiences to feedback\ninto the Chaos Toolkit.",
            "title": "Who is behind the Chaos Toolkit?"
        },
        {
            "location": "/faq/#what-is-the-license-of-the-chaos-toolkit",
            "text": "Apache 2.0 .",
            "title": "What is the license of the Chaos Toolkit?"
        },
        {
            "location": "/faq/#how-can-i-contribute",
            "text": "The Chaos Toolkit welcomes contributors! To help the project, please go to\nthe right project on  GitHub  and create an issue. If you feel like it,\ndo not hesitate to fork the repository, make a change and submit a \npull-request to the upstream project for review.",
            "title": "How can I contribute?"
        },
        {
            "location": "/reference/introduction/",
            "text": "Once you\u2019ve got your hands dirty with the tutorials it\u2019s time to start using the\n Chaos Toolkit for yourself in your own teams and with your own systems. \n\n\nWhether you\u2019re exploring the specific commands in the Chaos Toolkit\u2019s workflow,\n looking to add a new third-party integration, or even looking into how to extend\n the Chaos Toolkit for your own specific chaos enginering needs, this reference \ndocumentation should be your first port of call for the information you need.\n\n\n\n\nConcepts\n - The key concepts in the Chaos Toolkit\n\n\nWorkflow\n - The Chaos Toolkit Workflow\n\n\nUsage\n - Reference on the core and additional commands available\n\n\nOpen API\n - Guide to the Open API for Chaos Engineering experiments\n\n\nExtending the Chaos Toolkit\n - Ways to extend the Chaos Toolkit for your own, specific needs\n\n\nDeveloping the Chaos Toolkit\n - Get involved in developing the free nad open source Chaos Toolkit projects.",
            "title": "Introduction"
        },
        {
            "location": "/reference/concepts/",
            "text": "Chaos Engeering Concepts in the Chaos Toolkit\n\u00b6\n\n\nIf you haven\u2019t already, we strongly recommend reading the fantastic\n\nChaos Engineering\n book from O\u2019Reilly Media. This\nbook will give you some fantastic background on the whole Chaos Engineering\ndiscipline, and it\u2019s free!\n\n\nChaos Engineering is a discipline that allows you to surface weaknesses, and\neventually build confidence, in complex and often distributed systems. \n\n\nThe Chaos Toolkit aims to give you the simplest experience for writing and\nrunning your own Chaos Engineering experiments. The main concepts are all\nexpressed in an experiment definition, of which the following is an example\nfrom the\n\nChaos Toolkit Samples\n\nproject:\n\n\n{\n\n    \n\"version\"\n:\n \n\"1.0.0\"\n,\n\n    \n\"title\"\n:\n \n\"System is resilient to provider's failures\"\n,\n\n    \n\"description\"\n:\n \n\"Can our consumer survive gracefully a provider's failure?\"\n,\n\n    \n\"tags\"\n:\n \n[\n\n        \n\"service\"\n,\n\n        \n\"kubernetes\"\n,\n\n        \n\"spring\"\n\n    \n],\n\n    \n\"steady-state-hypothesis\"\n:\n \n{\n\n        \n\"title\"\n:\n \n\"Services are all available and healthy\"\n,\n\n        \n\"probes\"\n:\n \n[\n\n            \n{\n\n                \n\"type\"\n:\n \n\"probe\"\n,\n\n                \n\"name\"\n:\n \n\"all-services-are-healthy\"\n,\n\n                \n\"tolerance\"\n:\n \ntrue\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"type\"\n:\n \n\"python\"\n,\n\n                    \n\"module\"\n:\n \n\"chaosk8s.probes\"\n,\n\n                    \n\"func\"\n:\n \n\"all_microservices_healthy\"\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"stop-provider-service\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"module\"\n:\n \n\"chaosk8s.actions\"\n,\n\n                \n\"func\"\n:\n \n\"kill_microservice\"\n,\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"name\"\n:\n \n\"my-provider-service\"\n\n                \n}\n\n            \n},\n\n            \n\"pauses\"\n:\n \n{\n\n                \n\"after\"\n:\n \n10\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"ref\"\n:\n \n\"all-services-are-healthy\"\n\n        \n},\n\n        \n{\n\n            \n\"type\"\n:\n \n\"probe\"\n,\n\n            \n\"name\"\n:\n \n\"consumer-service-must-still-respond\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"http\"\n,\n\n                \n\"url\"\n:\n \n\"http://192.168.42.58:31018/invokeConsumedService\"\n\n            \n}\n\n        \n}\n\n    \n],\n\n    \n\"rollbacks\"\n:\n \n[]\n\n\n}\n\n\n\n\n\nThe key concepts of the Chaos Toolkit are \nExperiments\n,\n\nSteady State Hypothesis\n and the experiment\u2019s \nMethod\n. The \nMethod\n\ncontains a combination of \nProbes\n and \nActions\n.\n\n\nExperiments\n\u00b6\n\n\nA Chaos Toolkit experiment is provided in a single file and is currently\nexpressed in JSON.\n\n\nSteady State Hypothesis\n\u00b6\n\n\nA Steady State Hypothesis describes \u201cwhat normal looks like\u201d for your system\nin order for the experiment to surface information about weaknesses when compared against the declared \u201cnormal\u201d tolerances of what is measured.\n\n\nThe Chaos Toolkit uses the Steady State Hypothesis for two purposes. It is used as a check before an experiment is run that the target system is in a recognised \nnormal\n state. It is also used as the template for comparison of the state of your system \nafter\n the experiment has been run, forming the results provided by the experiment\u2019s report.\n\n\nMethod\n\u00b6\n\n\nAn experiment\u2019s activities are contained within its \nMethod\n block.\n\n\nProbes\n\u00b6\n\n\nA probe is a way of observing a particular set of conditions in the system that\nis undergoing experimentation.\n\n\nActions\n\u00b6\n\n\nAn action is a particular activity that needs to be enacted on the system under\nexperimentation.\n\n\nRollbacks\n\u00b6\n\n\nAn experiment may define a sequence of actions that revert what was undone\nduring the experiment.",
            "title": "Concepts"
        },
        {
            "location": "/reference/concepts/#chaos-engeering-concepts-in-the-chaos-toolkit",
            "text": "If you haven\u2019t already, we strongly recommend reading the fantastic Chaos Engineering  book from O\u2019Reilly Media. This\nbook will give you some fantastic background on the whole Chaos Engineering\ndiscipline, and it\u2019s free!  Chaos Engineering is a discipline that allows you to surface weaknesses, and\neventually build confidence, in complex and often distributed systems.   The Chaos Toolkit aims to give you the simplest experience for writing and\nrunning your own Chaos Engineering experiments. The main concepts are all\nexpressed in an experiment definition, of which the following is an example\nfrom the Chaos Toolkit Samples \nproject:  { \n     \"version\" :   \"1.0.0\" , \n     \"title\" :   \"System is resilient to provider's failures\" , \n     \"description\" :   \"Can our consumer survive gracefully a provider's failure?\" , \n     \"tags\" :   [ \n         \"service\" , \n         \"kubernetes\" , \n         \"spring\" \n     ], \n     \"steady-state-hypothesis\" :   { \n         \"title\" :   \"Services are all available and healthy\" , \n         \"probes\" :   [ \n             { \n                 \"type\" :   \"probe\" , \n                 \"name\" :   \"all-services-are-healthy\" , \n                 \"tolerance\" :   true , \n                 \"provider\" :   { \n                     \"type\" :   \"python\" , \n                     \"module\" :   \"chaosk8s.probes\" , \n                     \"func\" :   \"all_microservices_healthy\" \n                 } \n             } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"stop-provider-service\" , \n             \"provider\" :   { \n                 \"type\" :   \"python\" , \n                 \"module\" :   \"chaosk8s.actions\" , \n                 \"func\" :   \"kill_microservice\" , \n                 \"arguments\" :   { \n                     \"name\" :   \"my-provider-service\" \n                 } \n             }, \n             \"pauses\" :   { \n                 \"after\" :   10 \n             } \n         }, \n         { \n             \"ref\" :   \"all-services-are-healthy\" \n         }, \n         { \n             \"type\" :   \"probe\" , \n             \"name\" :   \"consumer-service-must-still-respond\" , \n             \"provider\" :   { \n                 \"type\" :   \"http\" , \n                 \"url\" :   \"http://192.168.42.58:31018/invokeConsumedService\" \n             } \n         } \n     ], \n     \"rollbacks\" :   []  }   The key concepts of the Chaos Toolkit are  Experiments , Steady State Hypothesis  and the experiment\u2019s  Method . The  Method \ncontains a combination of  Probes  and  Actions .",
            "title": "Chaos Engeering Concepts in the Chaos Toolkit"
        },
        {
            "location": "/reference/concepts/#experiments",
            "text": "A Chaos Toolkit experiment is provided in a single file and is currently\nexpressed in JSON.",
            "title": "Experiments"
        },
        {
            "location": "/reference/concepts/#steady-state-hypothesis",
            "text": "A Steady State Hypothesis describes \u201cwhat normal looks like\u201d for your system\nin order for the experiment to surface information about weaknesses when compared against the declared \u201cnormal\u201d tolerances of what is measured.  The Chaos Toolkit uses the Steady State Hypothesis for two purposes. It is used as a check before an experiment is run that the target system is in a recognised  normal  state. It is also used as the template for comparison of the state of your system  after  the experiment has been run, forming the results provided by the experiment\u2019s report.",
            "title": "Steady State Hypothesis"
        },
        {
            "location": "/reference/concepts/#method",
            "text": "An experiment\u2019s activities are contained within its  Method  block.",
            "title": "Method"
        },
        {
            "location": "/reference/concepts/#probes",
            "text": "A probe is a way of observing a particular set of conditions in the system that\nis undergoing experimentation.",
            "title": "Probes"
        },
        {
            "location": "/reference/concepts/#actions",
            "text": "An action is a particular activity that needs to be enacted on the system under\nexperimentation.",
            "title": "Actions"
        },
        {
            "location": "/reference/concepts/#rollbacks",
            "text": "An experiment may define a sequence of actions that revert what was undone\nduring the experiment.",
            "title": "Rollbacks"
        },
        {
            "location": "/reference/workflow/",
            "text": "Chaos Engineering is about building experiments that you and your team can then learn from as you decide what weaknesses to guard against in your production systems. You can then execute those automated experiments as continuously as possible to discover and explore further weaknesses if they arise over time in your system.\n\n\nTo enable and speed up the exploration and implementation of these learning loops through Chaos Engineering the Chaos Toolkit implements a specific workflow through a set of commands that can be run using the Chaos Toolkit\u2019s CLI:\n\n\n\n\ndiscover\n - Used to discover the capabilities of your target systems and the levels within those systems\n\n\ninit\n - Takes what has been discovered and then helps you initialise a new \nexperiment definition\n.\n\n\nrun\n - Takes an experiment definition and executes it.\n\n\nreport\n - Takes the output from an experiment\u2019s execution and produces a report for every stakeholder interested in the experiment\u2019s outcome.\n\n\n\n\nThis workflow and all of the above commands can be explored in the Chaos Toolkit\u2019s freely available online tutorials.",
            "title": "The Chaos Toolkit Workflow"
        },
        {
            "location": "/reference/usage/overview/",
            "text": "The Chaos Toolkit implements a specific workflow that intends to help you discover, explore, build, run and , most importantly, learn from your chaos engineering experiments.\n\n\n\n\nInstall\n or \nUpgrade\n the Chaos Toolkit.\n\n\nDiscover\n what can be explored in your target environment.\n\n\nInit\n to bootstrap your own, new chaos engineering experiments based on what has been \ndiscovered\n.\n\n\nRun\n your chaos engineering experiments.\n\n\nProduce great reports\n based on the findings of your chaos engineering experiments.",
            "title": "Overview"
        },
        {
            "location": "/reference/usage/install/",
            "text": "How to Install the Chaos Toolkit\n\u00b6\n\n\n\n\n\nPython Requirements\n\u00b6\n\n\nThe \nchaostoolkit CLI\n is implemented in Python 3 and this requires a\nworking Python installation to run. It officially supports Python 3.5+. It has\nonly been tested against [CPython][python].\n\n\nInstall Python\n\u00b6\n\n\nInstall Python for your system:\n\n\nOn MacOS X:\n\n\n$ brew install python3\n\n\n\n\nOn Debian/Ubuntu:\n\n\n$ sudo apt-get install python3 python3-venv\n\n\n\n\nOn CentOS:\n\n\n$ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n$ sudo yum -y install python35u\n\n\n\n\nNotice, on CentOS, the Python 3.5 binary is named \npython3.5\n rather than\n\npython3\n as other systems.\n\n\nOn Windows:\n\n\nDownload the latest binary installer\n from the Python website.\n\n\nCreate a virtual environment\n\u00b6\n\n\nDependencies can be installed for your system via its package management but,\nmore likely, you will want to install them yourself in a local virtual\nenvironment.\n\n\n$ python3 -m venv ~/.venvs/chaostk\n\n\n\n\nMake sure to always activate your virtual environment before using it:\n\n\n$ source  ~/.venvs/chaostk/bin/activate\n\n\n\n\n\n\nTip\n\n\nYou may want to use \nvirtualenvwrapper\n to make this process much nicer.\n\n\n\n\nInstall the CLI\n\u00b6\n\n\nInstall \nchaostoolkit\n in the virtual environment as follows:\n\n\n(chaostk) $ pip install chaostoolkit\n\n\n\n\nYou can verify the command was installed by running:\n\n\n(chaostk) $ chaos --version",
            "title": "Install"
        },
        {
            "location": "/reference/usage/install/#how-to-install-the-chaos-toolkit",
            "text": "",
            "title": "How to Install the Chaos Toolkit"
        },
        {
            "location": "/reference/usage/install/#python-requirements",
            "text": "The  chaostoolkit CLI  is implemented in Python 3 and this requires a\nworking Python installation to run. It officially supports Python 3.5+. It has\nonly been tested against [CPython][python].",
            "title": "Python Requirements"
        },
        {
            "location": "/reference/usage/install/#install-python",
            "text": "Install Python for your system:  On MacOS X:  $ brew install python3  On Debian/Ubuntu:  $ sudo apt-get install python3 python3-venv  On CentOS:  $ sudo yum -y install https://centos7.iuscommunity.org/ius-release.rpm\n$ sudo yum -y install python35u  Notice, on CentOS, the Python 3.5 binary is named  python3.5  rather than python3  as other systems.  On Windows:  Download the latest binary installer  from the Python website.",
            "title": "Install Python"
        },
        {
            "location": "/reference/usage/install/#create-a-virtual-environment",
            "text": "Dependencies can be installed for your system via its package management but,\nmore likely, you will want to install them yourself in a local virtual\nenvironment.  $ python3 -m venv ~/.venvs/chaostk  Make sure to always activate your virtual environment before using it:  $ source  ~/.venvs/chaostk/bin/activate   Tip  You may want to use  virtualenvwrapper  to make this process much nicer.",
            "title": "Create a virtual environment"
        },
        {
            "location": "/reference/usage/install/#install-the-cli",
            "text": "Install  chaostoolkit  in the virtual environment as follows:  (chaostk) $ pip install chaostoolkit  You can verify the command was installed by running:  (chaostk) $ chaos --version",
            "title": "Install the CLI"
        },
        {
            "location": "/reference/usage/upgrade/",
            "text": "How to Upgrade the Chaos Toolkit\n\u00b6\n\n\nYou can update your Chaos Toolkit installation by executing:\n\n\n(chaostk) $ pip install -U chaostoolkit",
            "title": "Upgrade"
        },
        {
            "location": "/reference/usage/upgrade/#how-to-upgrade-the-chaos-toolkit",
            "text": "You can update your Chaos Toolkit installation by executing:  (chaostk) $ pip install -U chaostoolkit",
            "title": "How to Upgrade the Chaos Toolkit"
        },
        {
            "location": "/reference/usage/cli/",
            "text": "The heart of the Chaos Toolkit is the \nchaos\n command line.\n\n\n\n\nActivate the Python virtual environment\n\n\nIf you run the Chaos Toolkit directly, rather than using a container,\nalways ensure you have activated the virtual environment so that it can\nbe found along its dependencies:\n\n\n$ source ~/.venvs/chaostk/bin/activate\n(chaostk) $\n\n\n\n\n\n\nOnce \ninstalled\n, the Chaos Toolkit CLI will display the commands it supports \nby executing:\n\n\n(chaostk) $ chaos --help",
            "title": "The CLI"
        },
        {
            "location": "/reference/usage/discover/",
            "text": "The \nchaos discover\n command\n\u00b6\n\n\nYou use the \nchaos discover\n command to specify a Chaos Toolkit integration extension and,\nif supported by the integration, to then explore your target environment in order \nto build a \ndiscovery report\n that can be used by the \nchaos init\n command to help \nyou bootstrap your own chaos engineering experiments.\n\n\nYou can see the options available to you by executing:\n\n\n(chaostk) $ chaos discover --help\n\n\n\n\n\n\n\nA tutorial on how to use the \nchaos discover\n command is available as part of the \n\nChaos Toolkit\u2019s Getting Started tutorials.\n\n\nDiscovering capabilities and experiments\n\u00b6\n\n\nTo execute discover all you need to do is specify the Chaos Toolkit integration \nextension that you\u2019d like to use, for example to use Kubernetes:\n\n\n(chaostk) $ chaos discover chaostoolkit-kubernetes\n\n\n\n\n\n\n\nThe \nchaos discover\n command will produce a report saved in \n./discovery.json\n by default, \nalthough you can specify where this report is produced by supplying the \n\n--discovery-report-path\n option.\n\n\nDiscovery without System Information\n\u00b6\n\n\nTo not probe the target system during the discovery process you can supply the \n\n--no-system-info\n option.\n\n\nDiscovery without Installation of an Integration Extension\n\u00b6\n\n\nIf you already have the integration extension installed and available you can \nspeed up the discovery process by specifying the \n--no-install\n option.",
            "title": "Discover"
        },
        {
            "location": "/reference/usage/discover/#the-chaos-discover-command",
            "text": "You use the  chaos discover  command to specify a Chaos Toolkit integration extension and,\nif supported by the integration, to then explore your target environment in order \nto build a  discovery report  that can be used by the  chaos init  command to help \nyou bootstrap your own chaos engineering experiments.  You can see the options available to you by executing:  (chaostk) $ chaos discover --help   A tutorial on how to use the  chaos discover  command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.",
            "title": "The chaos discover command"
        },
        {
            "location": "/reference/usage/discover/#discovering-capabilities-and-experiments",
            "text": "To execute discover all you need to do is specify the Chaos Toolkit integration \nextension that you\u2019d like to use, for example to use Kubernetes:  (chaostk) $ chaos discover chaostoolkit-kubernetes   The  chaos discover  command will produce a report saved in  ./discovery.json  by default, \nalthough you can specify where this report is produced by supplying the  --discovery-report-path  option.",
            "title": "Discovering capabilities and experiments"
        },
        {
            "location": "/reference/usage/discover/#discovery-without-system-information",
            "text": "To not probe the target system during the discovery process you can supply the  --no-system-info  option.",
            "title": "Discovery without System Information"
        },
        {
            "location": "/reference/usage/discover/#discovery-without-installation-of-an-integration-extension",
            "text": "If you already have the integration extension installed and available you can \nspeed up the discovery process by specifying the  --no-install  option.",
            "title": "Discovery without Installation of an Integration Extension"
        },
        {
            "location": "/reference/usage/init/",
            "text": "The \nchaos init\n command\n\u00b6\n\n\nYou use the \nchaos init\n command to take a \ndiscovery report\n, usually created \nby the \nchaos discover\n command, to then create an experiment based upon \nwhat has been discovered about the integration extension and, if applicable, \nthe target environment.\n\n\nYou can see the options available to you by executing:\n\n\n(chaostk) $ chaos init --help\n\n\n\n\n\n\n\nA tutorial on how to use the \nchaos init\n command is available as part of the \n\nChaos Toolkit\u2019s Getting Started tutorials.\n\n\nInitialise a new experiment\n\u00b6\n\n\nTo initialise a new experiment based on what has been \ndiscovered\n \nyou simply need to execute the \nchaos init\n command:\n\n\n(chaostk) $ chaos init\n\n\n\n\n\n\n\nBy default, the \nchaos init\n command will look for a \n./discovery.json\n \nfile and use that as the basis of a new experiment\u2019s initialisation.\n\n\nYou can specify another file to be used by suppling the \n\n--discovery-report-path\n option.\n\n\nIn addition the default output from the \ninit\n command will be a new \nChaos Toolkit experiment definition in a \n./experiment.json\n file. If you would \nprefer a different filename then this can be specified using the \n\n--experiment-path\n option.",
            "title": "Init"
        },
        {
            "location": "/reference/usage/init/#the-chaos-init-command",
            "text": "You use the  chaos init  command to take a  discovery report , usually created \nby the  chaos discover  command, to then create an experiment based upon \nwhat has been discovered about the integration extension and, if applicable, \nthe target environment.  You can see the options available to you by executing:  (chaostk) $ chaos init --help   A tutorial on how to use the  chaos init  command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.",
            "title": "The chaos init command"
        },
        {
            "location": "/reference/usage/init/#initialise-a-new-experiment",
            "text": "To initialise a new experiment based on what has been  discovered  \nyou simply need to execute the  chaos init  command:  (chaostk) $ chaos init   By default, the  chaos init  command will look for a  ./discovery.json  \nfile and use that as the basis of a new experiment\u2019s initialisation.  You can specify another file to be used by suppling the  --discovery-report-path  option.  In addition the default output from the  init  command will be a new \nChaos Toolkit experiment definition in a  ./experiment.json  file. If you would \nprefer a different filename then this can be specified using the  --experiment-path  option.",
            "title": "Initialise a new experiment"
        },
        {
            "location": "/reference/usage/run/",
            "text": "The \nchaos run\n command\n\u00b6\n\n\nYou use the \nchaos run\n command to execute your declarative chaos engineering \nexperiments. To see the options that can be passed to the \nchaos run\n command, \nexecute:\n\n\n(chaostk) $ chaos run --help\n\n\n\n\n\n\n\nA tutorial on how to use the \nchaos run\n command is available as part of the \n\nChaos Toolkit\u2019s Getting Started tutorials.\n\n\nExecuting an Experiment Plan\n\u00b6\n\n\nTo execute an experiment plan you simply pass it to the \nchaos run\n command:\n\n\n(chaostk) $ chaos run experiment.json\n\n\n\n\n\n\n\nchaostoolkit\n will log all the steps it follows from your plan in a journal by \ndefault called \nchaos-report.json\n. You can specify the name of this journal \noutput file using the \n--report-path\n option.\n\n\nRehearsing an experiment execution\n\u00b6\n\n\nTo test that you have a valid experiment you can pass the \n--dry\n option.\n\n\nRun an experiment without validation\n\u00b6\n\n\nYou can run an experiment and skip the experiment\u2019s validation using the \n\n--no-validation\n option.",
            "title": "Run"
        },
        {
            "location": "/reference/usage/run/#the-chaos-run-command",
            "text": "You use the  chaos run  command to execute your declarative chaos engineering \nexperiments. To see the options that can be passed to the  chaos run  command, \nexecute:  (chaostk) $ chaos run --help   A tutorial on how to use the  chaos run  command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.",
            "title": "The chaos run command"
        },
        {
            "location": "/reference/usage/run/#executing-an-experiment-plan",
            "text": "To execute an experiment plan you simply pass it to the  chaos run  command:  (chaostk) $ chaos run experiment.json   chaostoolkit  will log all the steps it follows from your plan in a journal by \ndefault called  chaos-report.json . You can specify the name of this journal \noutput file using the  --report-path  option.",
            "title": "Executing an Experiment Plan"
        },
        {
            "location": "/reference/usage/run/#rehearsing-an-experiment-execution",
            "text": "To test that you have a valid experiment you can pass the  --dry  option.",
            "title": "Rehearsing an experiment execution"
        },
        {
            "location": "/reference/usage/run/#run-an-experiment-without-validation",
            "text": "You can run an experiment and skip the experiment\u2019s validation using the  --no-validation  option.",
            "title": "Run an experiment without validation"
        },
        {
            "location": "/reference/usage/report/",
            "text": "The \nchaos report\n command\n\u00b6\n\n\nYou use the \nchaos report\n command to take the journal produced by the \n\nchaos run\n command and produce a report in a specified format.\n\n\nDue to the many operating system-dependent features that the \nchaos report\n \ncommand relies upon, the \nchaos report\n command is not installed with the \nChaos Toolkit CLI. To install the \nchaos report\n command you need to \ninstall \nthe \nchaostoolkit-reporting\n plugin and the dependencies appropriate to your \nown operating system\n.\n\n\nOnce the plugin is installed you can see the options available to you by \nexecuting:\n\n\n(chaostk) $ chaos report --help\n\n\n\n\n\n\n\nA tutorial on how to use the \nchaos report\n command is available as part of the \n\nChaos Toolkit\u2019s Getting Started tutorials.\n\n\nGenerating a report\n\u00b6\n\n\nWhen an experiment completes after using the \nchaos run\n command a journal is \ngenerated and stored in the \nchaos-report.json\n file. A PDF or HTML report may \nbe generated from this journal using the \nchaostoolkit-reporting\n \nlibrary.\n\n\nThe \nchaos report\n command expects the path to the \nchaos-report.json\n file \nand a path to the actual report file that you require.\n\n\nYou can export various formats of report by specifying what you want using the \n\n--export-format\n option.\n\n\nFor example, to generate a PDF report you can run the following command:\n\n\n$ chaos report --export-format=pdf chaos-report.json report.pdf\n\n\n\n\nAn HTML report can be produced using:\n\n\n$ chaos report --export-format=html5 chaos-report.json report.html",
            "title": "Report"
        },
        {
            "location": "/reference/usage/report/#the-chaos-report-command",
            "text": "You use the  chaos report  command to take the journal produced by the  chaos run  command and produce a report in a specified format.  Due to the many operating system-dependent features that the  chaos report  \ncommand relies upon, the  chaos report  command is not installed with the \nChaos Toolkit CLI. To install the  chaos report  command you need to  install \nthe  chaostoolkit-reporting  plugin and the dependencies appropriate to your \nown operating system .  Once the plugin is installed you can see the options available to you by \nexecuting:  (chaostk) $ chaos report --help   A tutorial on how to use the  chaos report  command is available as part of the  Chaos Toolkit\u2019s Getting Started tutorials.",
            "title": "The chaos report command"
        },
        {
            "location": "/reference/usage/report/#generating-a-report",
            "text": "When an experiment completes after using the  chaos run  command a journal is \ngenerated and stored in the  chaos-report.json  file. A PDF or HTML report may \nbe generated from this journal using the  chaostoolkit-reporting  \nlibrary.  The  chaos report  command expects the path to the  chaos-report.json  file \nand a path to the actual report file that you require.  You can export various formats of report by specifying what you want using the  --export-format  option.  For example, to generate a PDF report you can run the following command:  $ chaos report --export-format=pdf chaos-report.json report.pdf  An HTML report can be produced using:  $ chaos report --export-format=html5 chaos-report.json report.html",
            "title": "Generating a report"
        },
        {
            "location": "/reference/api/experiment/",
            "text": "An Open API for Chaos Engineering Experiments\n\u00b6\n\n\n\n\nInfo\n\n\nThe current specification has not reached its 1.0.0 stable version yet. Make\nsure to \njoin the discussion\n to provide any feedback you might have.\n\n\n\n\nIntroduction\n\u00b6\n\n\nThe purpose of this specification is to formalize the elements of a Chaos\nEngineering experiment and offer a way to federate the community around a\ncommon syntax and semantic.\n\n\nAs a fairly recent field, Chaos Engineering is a dynamic and its foundations\nare still emerging. However, it appears certain concepts are settling down\nenough to start agreeing on a shared understanding.\n\n\nThis specification is not prescriptive and does not aim at forcing the\ncommunity into one direction, rather it strives at providing a common\nvocabulary that new practicionners can easily make sense of.\n\n\nIt is necessary to appreciate that this document does not specify what tools,\nsuch as the Chaos Monkey or similar, should look like. Instead, this document\nspecifies how Chaos Engineering Experiment could be described, shared and\nconducted collaboratively.\n\n\nConventions Used in This Document\n\u00b6\n\n\nThe key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d,\n\u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this\ndocument are to be interpreted as described in \nRFC 2119\n.\n\n\nThe terms \u201cJSON\u201d, \u201cJSON text\u201d, \u201cJSON value\u201d, \u201cmember\u201d, \u201celement\u201d, \u201cobject\u201d,\n\u201carray\u201d, \u201cnumber\u201d, \u201cstring\u201d, \u201cboolean\u201d, \u201ctrue\u201d, \u201cfalse\u201d, and \u201cnull\u201d in this\ndocument are to be interpreted as defined in \nRFC 7159\n.\n\n\nChaos Engineering Elements\n\u00b6\n\n\nOverview\n\u00b6\n\n\nAn Experiment is one possible description of the\n\nprinciples of the Chaos Engineering\n. The intention of such a\ndescription is to provide shared understanding around a hypothesis on how\nto discover system\u2019s behavior under certain conditions.\n\n\nAn \nExperiment\n declares a steady \nstate hypothesis\n, alongside\n\nprobes\n to validate this steady state is met, and a \nmethod\n as a\nsequence \nactions\n and \nprobes\n, to interact and query the system\nrespectively.\n\n\nBy using a variety of \nprobes\n, experiments should gather information to\nsense behaviors in the system, potentially leading to systemic patterns that can\nbe stabilized.\n\n\nExperiment\n\u00b6\n\n\nA Chaos Engineering experiment, or simply an experiment, describes both the\nelements and the order in which they should be applied.\n\n\nAn experiment is a JSON object.\n\n\nAn experiment MUST declare:\n\n\n\n\na \nversion\n property\n\n\na \ntitle\n property\n\n\na \ndescription\n property\n\n\na \nsteady-state-hypothesis\n property\n\n\na \nmethod\n property\n\n\n\n\nThe \nversion\n property MUST be \n\"0.1.0\"\n.\n\n\nThe experiment\u2019s \ntitle\n and \ndescription\n are meant for humans and therefore\nshould be as descriptive as possible to clarify the experiment\u2019s rationale.\n\n\nTitle and description are JSON strings with no maximum length.\n\n\nAn experiment SHOULD also declare:\n\n\n\n\na \nrollbacks\n property\n\n\n\n\nAn experiment MAY finally declare:\n\n\n\n\na \ntags\n property\n\n\na \nsecrets\n property\n\n\n\n\nTags provide a way of categorizing experiments. It is a sequence of JSON\nstrings.\n\n\nSteady State Hypothesis\n\u00b6\n\n\nThe Steady State Hypothesis element describes what normal looks like in your\nsystem before the Method element is applied. If the steady state is not met,\nthe Method element is not applied and the experiment MUST bail out.\n\n\nThe Steady State Hypothesis element is a JSON object.\n\n\nSteady State Hypothesis element MUST declare:\n\n\n\n\na \ntitle\n property\n\n\na \nprobes\n property\n\n\n\n\nThe \ntitle\n is meant for humans and therefore should clarify the rationale for\nthis hypothesis.\n\n\nEach \nProbe\n MUST define a \ntolerance\n property that acting as a gate\nmechanism for the experiment to carry on or bail. Any \nProbe\n that does not\nfall into the \ntolerance\n zone MUST fail the experiment.\n\n\nSteady State Probe Tolerance\n\u00b6\n\n\nProbes\n of the Steady State Hypothesis MUST declare an additional property\nnamed \ntolerance\n.\n\n\nThe \ntolerance\n property\u2019s value MUST be one of:\n\n\n\n\na scalar: JSON string, number (an integer), boolean\n\n\na sequence of two scalars defining a lower and upper bounds\n\n\na Probe object\n\n\n\n\nIn the case of a scalar or the sequence, the tolerance validation MUST be\nstrict. The value returned by the \nProbe\n MUST be checked against the\nscalar value. The experiment MUST bail when both fail to match.\n\n\nWhen the \ntolerance\n is a sequence of two scalars, the returned value from\nthe \nProbe\n MUST fall within the boundaries they form.\n\n\nIn the case of a \nProbe\n object, the tolerance validation is left\nundefined as it is controlled by the \nProbe\n itself. However, it is\nRECOMMENDED that the \ntolerance\n \nProbe\n acts strictly in order to improve\nthe readability of the experiment\u2019s results.\n\n\nSome examples of \ntolerance\n properties.\n\n\nA boolean tolerance:\n\n\"tolerance\"\n:\n \ntrue\n\n\n\n\nA integer tolerance:\n\n\"tolerance\"\n:\n \n8\n\n\n\n\nA string tolerance:\n\n\"tolerance\"\n:\n \n\"OK\"\n\n\n\n\nA sequence tolerance:\n\n\"tolerance\"\n:\n \n[\n4\n,\n \n9\n]\n\n\n\n\nA \nProbe\n tolerance:\n\n\"tolerance\"\n:\n \n{\n\n    \n\"type\"\n:\n \n\"probe\"\n,\n\n    \n\"name\"\n:\n \n\"should-exist\"\n,\n\n    \n\"provider\"\n:\n \n{\n\n        \n\"type\"\n:\n \n\"python\"\n,\n\n        \n\"module\"\n:\n \n\"os.path\"\n,\n\n        \n\"func\"\n:\n \n\"exists\"\n,\n\n        \n\"arguments\"\n:\n \n{\n\n            \n\"path\"\n:\n \n\"some/file\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\nMethod\n\u00b6\n\n\nThe Method describes the sequence of \nProbe\n and \nAction\n elements\nto apply. The Method is declared under \nmethod\n property at the top-level of the\nexperiment.\n\n\nThe \nmethod\n MUST have at least one element but this can be either a \nProbe\n\nor an \nAction\n.\n\n\nThe elements MUST be applied in the order they are declared.\n\n\nProbe\n\u00b6\n\n\nA Probe collects information from the system during the experiment.\n\n\nA Probe is a JSON object. A Probe is declared fully or reference another Probe\nthrough the \nref\n property.\n\n\nWhen declared fully, a Probe MUST declare:\n\n\n\n\na \ntype\n property\n\n\na \nname\n property\n\n\na \nprovider\n property\n\n\n\n\nThe \ntype\n property MUST be the JSON string \n\"probe\"\n. \n\n\nThe \nname\n property is a free-form JSON string that MAY be considered as an\nidentifier withing the experiment.\n\n\nIt MAY also declare:\n\n\n\n\na \nsecret\n property\n\n\na \nconfiguration\n property\n\n\na \nbackground\n property\n\n\n\n\nThe \nsecret\n property MUST be a JSON string referencing an identifier declared\nin the top-level \nsecrets\n \nproperty\n. It is assumed that when not\ndeclared, the Probe requires no secrets.\n\n\nThe \nconfiguration\n property MUST be a JSON string referencing an identifier\ndeclared in the top-level \nconfiguration\n \nproperty\n. It is assumed that\nwhen not declared, the Probe requires no configuration.\n\n\nThe \nbackground\n property MUST be a JSON boolean value either \ntrue\n or \nfalse\n.\nIt is assumed that, when that property is not declared, it is set to \nfalse\n.\nWhen that property is set to \ntrue\n it indicates the Probe MUST not block\nand the next Action or Probe should immediatly be applied.\n\n\nWhen a Probe references another Probe in the Experiment, the Probe MUST\ndeclare a single property called \nref\n.\n\n\nThe \nref\n property MUST be a JSON string which MUST be the name of a declared\nProbe.\n\n\nAction\n\u00b6\n\n\nAn Action performs an operation against the system.\n\n\nAn Action collects information from the system during the experiment.\n\n\nAn Action is a JSON object. An Action is declared fully or reference another\nAction through the \nref\n property.\n\n\nWhen declared fully, a Action MUST declare:\n\n\n\n\na \ntype\n property\n\n\na \nname\n property\n\n\na \nprovider\n property\n\n\n\n\nThe \ntype\n property MUST be the JSON string \n\"action\"\n. \n\n\nThe \nname\n property is a free-form JSON string that MAY be considered as an\nidentifier withing the experiment.\n\n\nIt MAY also declare:\n\n\n\n\na \nsecret\n property\n\n\na \nconfiguration\n property\n\n\na \nbackground\n property\n\n\na \npauses\n property\n\n\n\n\nThe \nsecret\n property MUST be a JSON string referencing an identifier declared\nin the top-level \nsecrets\n \nproperty\n. It is assumed that when not\ndeclared, the Action requires no secrets.\n\n\nThe \nconfiguration\n property MUST be a JSON string referencing an identifier\ndeclared in the top-level \nconfiguration\n \nproperty\n. It is assumed that\nwhen not declared, the Action requires no configuration.\n\n\nThe \nbackground\n property MUST be a JSON boolean value either \ntrue\n or \nfalse\n.\nIt is assumed that, when that property is not declared, it is set to \nfalse\n.\nWhen that property is set to \ntrue\n it indicates the Action MUST not block\nand the next Action or Probe should immediatly be applied.\n\n\nThe \npauses\n property MUST be a JSON object which MAY have one or the two\nfollowing properties:\n\n\n\n\nbefore\n\n\nafter\n\n\n\n\nIn both cases, the value MUST be JSON number indicating the number of seconds to\nwait before continuining. The \nbefore\n pause MUST be performed before the Action\nwhile the \nafter\n MUST be performed afterwards.\n\n\nWhen a Action references another Action in the Experiment, the Action MUST\ndeclare a single property called \nref\n.\n\n\nThe \nref\n property MUST be a JSON string which MUST be the name of a declared\nAction.\n\n\nAction or Probe Provider\n\u00b6\n\n\nA provider MUST be a JSON object which MUST declare a \ntype\n property that\ndecides the other expected properties.\n\n\nThe \ntype\n property MUST be one of \n\"python\"\n, \n\"http\"\n or \n\"process\"\n.\n\n\nPython Provider\n\u00b6\n\n\nA Python Provider declares a Python function to be applied.\n\n\nA Python Provider MUST declare the following:\n\n\n\n\na \nmodule\n property\n\n\na \nfunc\n property\n\n\n\n\nIt SHOULD also declare an \narguments\n property when the function expects them.\n\n\nThe \nmodule\n property is the fully qualified module exposing the function. It\nMUST be a JSON string.\n\n\nThe \nfunc\n property is the name of the function to apply. It MUST be a JSON\nstring.\n\n\nWhen provided, the \narguments\n property MUST be a JSON object which\nproperties are the names of the \nfunction\u2019s arguments\n. When a function\u2019s\nsignature has \ndefault values\n for some of its arguments, those MAY be\nomitted from the \narguments\n object. In that case, those default values will be\nused.\n\n\nArgument values MUST be valid JSON entities.\n\n\nHTTP Provider\n\u00b6\n\n\nA HTTP Provider declares a URL to be called.\n\n\nA HTTP Provider MUST declare the following:\n\n\n\n\na \nurl\n property\n\n\n\n\nThe \nurl\n property MUST be a JSON string representing a URL as per\n\nRFC 3986\n.\n\n\nIn addition, the \nprovider\n object MAY declare any of the followings:\n\n\n\n\na \nmethod\n property\n\n\na \nheaders\n property\n\n\na \nexpected_status\n property\n\n\na \narguments\n property\n\n\na \ntimeout\n property\n\n\n\n\nThe \nmethod\n property MUST be a JSON string, such as \n\"POST\"\n, as per\n\nRFC 2616\n. It defaults to \n\"GET\"\n.\n\n\nThe \nheaders\n property MUST be a JSON object which properties are header names\nand values are header values, as per \nRFC 2616\n.\n\n\nThe \nexpected_status\n property MUST be a JSON number as per \nRFC 2616\n\ndefinining the expected HTTP response status for the Probe or Action to be\nconsidered failed or successful. It defaults to \n200\n.\n\n\nWhen provided, the \narguments\n property MUST be a JSON object which\nproperties are parameters of the HTTP request.\n\n\nWhen \nmethod\n is \n\"GET\"\n, the \narguments\n are mapped as a query-string of the\nURL. Otherwise, the \narguments\n are passed as the request body\u2019s data and the\nencoding depends on the \n\"Content-Type\"\n provided in the \nheaders\n object.\n\n\nThe \ntimeout\n property MUST be a JSON number specifying how long the request\nshould take to complete.\n\n\nProcess Provider\n\u00b6\n\n\nA Process Provider declares a process to be called.\n\n\nA Process Provider MUST declare the following:\n\n\n\n\na \npath\n property\n\n\n\n\nThe \npath\n property MUST be a JSON string of a path to an executable.\n\n\nIn addition, the \nprovider\n object MAY declare any of the followings:\n\n\n\n\na \narguments\n property\n\n\na \ntimeout\n property\n\n\n\n\nThe \narguments\n property MUST be a JSON object which defines the process\narguments. The properties are the names and each property\u2019s value is the\nthe argument\u2019s value. An argument that does not expect a value MUST set that\nvalue to the empty string \n\"\"\n.\n\n\nThe \ntimeout\n property MUST be a JSON number specifying how long the process\nshould take to complete.\n\n\nRollbacks\n\u00b6\n\n\nRollbacks declare the sequence of actions that attempt to put the system back\nto its initial state.\n\n\nThe experiment MAY declare a single \nrollbacks\n property which is a JSON array\nconsisting of \nActions\n.\n\n\nA failed rollback MUST not bail the sequence of rollbacks.\n\n\nSecrets\n\u00b6\n\n\nSecrets declare values that need to be passed on to \nActions\n or\n\nProbes\n in a secure manner.\n\n\nThe \nsecrets\n property MUST be a JSON object. Its properties are identifiers\nreferenced by \nActions\n and \nProbes\n.\n\n\nThe value of each identifier is a JSON object which properties are the secrets\nkeys and the properties values are the secrets values.\n\n\nReferenced secrets MUST be injected into probes and actions when they are\napplied. Probes and actions MUST NOT modify the secrets.\n\n\nSecrets MUST be passed a mapping of keys and values to probes and actions.\n\n\nAn example of a \nsecrets\n element at the top-level:\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"kubernetes\"\n:\n \n{\n\n            \n\"token\"\n:\n \n\"XYZ\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nThis can then referenced from probes or actions:\n\n\n{\n\n    \n\"type\"\n:\n \n\"probe\"\n,\n\n    \n\"secrets\"\n:\n \n\"kubernetes\"\n\n\n}\n\n\n\n\n\nInline Secrets\n\u00b6\n\n\nSecrets MAY be inlined in the \nExperiment\n directly.\n\n\nEnvironment Secrets\n\u00b6\n\n\nSecrets MAY be retrieved from the environment. In that case, they must be\ndeclared as a JSON object with a \ntype\n property set to \n\"env\"\n. The\nenvironment variable MUST be declared in the \nkey\n property as a JSON string.\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"kubernetes\"\n:\n \n{\n\n            \n\"token\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"env\"\n,\n\n                \n\"key\"\n:\n \n\"KUBERNETES_TOKEN\"\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nVault Secrets\n\u00b6\n\n\nSecrets MAY be retrieved from a \nHashiCorp vault instance\n. In that case,\nthey must be declared as a JSON object with a \ntype\n property set to \n\"vault\"\n.\nThe path to the key MUST be declared in the \nkey\n property as a JSON\nstring.\n\n\n{\n\n    \n\"secrets\"\n:\n \n{\n\n        \n\"myapp\"\n:\n \n{\n\n            \n\"token\"\n:\n \n{\n\n                \n\"type\"\n:\n \n\"vault\"\n,\n\n                \n\"key\"\n:\n \n\"secrets/something\"\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nConfiguration\n\u00b6\n\n\nConfiguration is meant to provide runtime values to \nactions\n and\n\nprobes\n.\n\n\nThe \nconfiguration\n element MUST be a JSON object. The value of each property\nMUST be a JSON string or object which properties are considered the\nconfiguration lookup. Configuration must be passed to all Probes and actions\nrequring it. Probes and actions MUST NOT modify the configuration.\n\n\nConfigurations MUST be passed a mapping of keys and values to probes and\nactions.\n\n\nAn example of a \nconfiguration\n element at the top-level:\n\n\n{\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"some_service\"\n:\n \n\"http://127.0.0.1:8080\"\n,\n\n        \n\"vault_addr\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"env\"\n,\n\n            \n\"key\"\n:\n \n\"VAULT_ADDR\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nInline Configurations\n\u00b6\n\n\nConfigurations MAY be inlined in the \nExperiment\n directly.\n\n\nEnvironment Configurations\n\u00b6\n\n\nConfigurations MAY be retrieved from the environment. In that case, they must be\ndeclared as a JSON object with a \ntype\n property set to \n\"env\"\n. The\nenvironment variable MUST be declared in the \nkey\n property as a JSON string.\n\n\n{\n\n    \n\"configuration\"\n:\n \n{\n\n        \n\"vault_address\"\n:\n \n{\n\n            \n\"type\"\n:\n \n\"env\"\n,\n\n            \n\"key\"\n:\n \n\"VAULT_ADDR\"\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nVariable Substitution\n\u00b6\n\n\nProbes and Actions argument values MAY be dynamically resolved at runtime. \n\n\nDynamic values MUST follow the syntax \n${name}\n where \nname\n is an identifier\ndeclared in either the Configuration or Secrets sections. When \nname\n is\ndeclared in both sections, the Configuration section MUST take precedence.\n\n\nDynamic values MUST be substituted before being passed to Probes or Actions.\n\n\nOther values, such as the HTTP Probe url, MAY be sustituted as well.\n\n\nExamples\n\u00b6\n\n\nThe following examples MUST NOT be considered normatives.\n\n\nMinimal Experiment\n\u00b6\n\n\nHere is an example of the most minimal experiment:\n\n\n{\n\n    \n\"version\"\n:\n \n\"0.1.0\"\n,\n\n    \n\"title\"\n:\n \n\"Moving a file from under our feet is forgivable\"\n,\n\n    \n\"description\"\n:\n \n\"Our application should re-create a file that was removed\"\n,\n\n    \n\"steady-state-hypothesis\"\n:\n \n{\n\n        \n\"title\"\n:\n \n\"The file must be around first\"\n,\n\n        \n\"probes\"\n:\n \n[\n\n            \n{\n\n                \n\"type\"\n:\n \n\"python\"\n,\n\n                \n\"name\"\n:\n \n\"file-must-exist\"\n,\n\n                \n\"tolerance\"\n:\n \ntrue\n,\n\n                \n\"provider\"\n:\n \n{\n\n                    \n\"module\"\n:\n \n\"os.path\"\n,\n\n                    \n\"func\"\n:\n \n\"exists\"\n,\n\n                    \n\"arguments\"\n:\n \n{\n\n                        \n\"path\"\n:\n \n\"some/file\"\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n},\n\n    \n\"method\"\n:\n \n[\n\n        \n{\n\n            \n\"type\"\n:\n \n\"action\"\n,\n\n            \n\"name\"\n:\n \n\"file-be-gone\"\n,\n\n            \n\"provider\"\n:\n \n{\n\n                \n\"module\"\n:\n \n\"os.path\"\n,\n\n                \n\"func\"\n:\n \n\"remove\"\n,\n\n                \n\"arguments\"\n:\n \n{\n\n                    \n\"path\"\n:\n \n\"some/file\"\n\n                \n}\n\n            \n},\n\n            \n\"pauses\"\n:\n \n{\n\n                \n\"after\"\n:\n \n5\n\n            \n}\n\n        \n},\n\n        \n{\n\n            \n\"ref\"\n:\n \n\"file-must-exist\"\n\n        \n}\n\n    \n]\n\n\n}",
            "title": "Experiment"
        },
        {
            "location": "/reference/api/experiment/#an-open-api-for-chaos-engineering-experiments",
            "text": "Info  The current specification has not reached its 1.0.0 stable version yet. Make\nsure to  join the discussion  to provide any feedback you might have.",
            "title": "An Open API for Chaos Engineering Experiments"
        },
        {
            "location": "/reference/api/experiment/#introduction",
            "text": "The purpose of this specification is to formalize the elements of a Chaos\nEngineering experiment and offer a way to federate the community around a\ncommon syntax and semantic.  As a fairly recent field, Chaos Engineering is a dynamic and its foundations\nare still emerging. However, it appears certain concepts are settling down\nenough to start agreeing on a shared understanding.  This specification is not prescriptive and does not aim at forcing the\ncommunity into one direction, rather it strives at providing a common\nvocabulary that new practicionners can easily make sense of.  It is necessary to appreciate that this document does not specify what tools,\nsuch as the Chaos Monkey or similar, should look like. Instead, this document\nspecifies how Chaos Engineering Experiment could be described, shared and\nconducted collaboratively.",
            "title": "Introduction"
        },
        {
            "location": "/reference/api/experiment/#conventions-used-in-this-document",
            "text": "The key words \u201cMUST\u201d, \u201cMUST NOT\u201d, \u201cREQUIRED\u201d, \u201cSHALL\u201d, \u201cSHALL NOT\u201d,\n\u201cSHOULD\u201d, \u201cSHOULD NOT\u201d, \u201cRECOMMENDED\u201d, \u201cMAY\u201d, and \u201cOPTIONAL\u201d in this\ndocument are to be interpreted as described in  RFC 2119 .  The terms \u201cJSON\u201d, \u201cJSON text\u201d, \u201cJSON value\u201d, \u201cmember\u201d, \u201celement\u201d, \u201cobject\u201d,\n\u201carray\u201d, \u201cnumber\u201d, \u201cstring\u201d, \u201cboolean\u201d, \u201ctrue\u201d, \u201cfalse\u201d, and \u201cnull\u201d in this\ndocument are to be interpreted as defined in  RFC 7159 .",
            "title": "Conventions Used in This Document"
        },
        {
            "location": "/reference/api/experiment/#chaos-engineering-elements",
            "text": "",
            "title": "Chaos Engineering Elements"
        },
        {
            "location": "/reference/api/experiment/#overview",
            "text": "An Experiment is one possible description of the principles of the Chaos Engineering . The intention of such a\ndescription is to provide shared understanding around a hypothesis on how\nto discover system\u2019s behavior under certain conditions.  An  Experiment  declares a steady  state hypothesis , alongside probes  to validate this steady state is met, and a  method  as a\nsequence  actions  and  probes , to interact and query the system\nrespectively.  By using a variety of  probes , experiments should gather information to\nsense behaviors in the system, potentially leading to systemic patterns that can\nbe stabilized.",
            "title": "Overview"
        },
        {
            "location": "/reference/api/experiment/#experiment",
            "text": "A Chaos Engineering experiment, or simply an experiment, describes both the\nelements and the order in which they should be applied.  An experiment is a JSON object.  An experiment MUST declare:   a  version  property  a  title  property  a  description  property  a  steady-state-hypothesis  property  a  method  property   The  version  property MUST be  \"0.1.0\" .  The experiment\u2019s  title  and  description  are meant for humans and therefore\nshould be as descriptive as possible to clarify the experiment\u2019s rationale.  Title and description are JSON strings with no maximum length.  An experiment SHOULD also declare:   a  rollbacks  property   An experiment MAY finally declare:   a  tags  property  a  secrets  property   Tags provide a way of categorizing experiments. It is a sequence of JSON\nstrings.",
            "title": "Experiment"
        },
        {
            "location": "/reference/api/experiment/#steady-state-hypothesis",
            "text": "The Steady State Hypothesis element describes what normal looks like in your\nsystem before the Method element is applied. If the steady state is not met,\nthe Method element is not applied and the experiment MUST bail out.  The Steady State Hypothesis element is a JSON object.  Steady State Hypothesis element MUST declare:   a  title  property  a  probes  property   The  title  is meant for humans and therefore should clarify the rationale for\nthis hypothesis.  Each  Probe  MUST define a  tolerance  property that acting as a gate\nmechanism for the experiment to carry on or bail. Any  Probe  that does not\nfall into the  tolerance  zone MUST fail the experiment.",
            "title": "Steady State Hypothesis"
        },
        {
            "location": "/reference/api/experiment/#steady-state-probe-tolerance",
            "text": "Probes  of the Steady State Hypothesis MUST declare an additional property\nnamed  tolerance .  The  tolerance  property\u2019s value MUST be one of:   a scalar: JSON string, number (an integer), boolean  a sequence of two scalars defining a lower and upper bounds  a Probe object   In the case of a scalar or the sequence, the tolerance validation MUST be\nstrict. The value returned by the  Probe  MUST be checked against the\nscalar value. The experiment MUST bail when both fail to match.  When the  tolerance  is a sequence of two scalars, the returned value from\nthe  Probe  MUST fall within the boundaries they form.  In the case of a  Probe  object, the tolerance validation is left\nundefined as it is controlled by the  Probe  itself. However, it is\nRECOMMENDED that the  tolerance   Probe  acts strictly in order to improve\nthe readability of the experiment\u2019s results.  Some examples of  tolerance  properties.  A boolean tolerance: \"tolerance\" :   true   A integer tolerance: \"tolerance\" :   8   A string tolerance: \"tolerance\" :   \"OK\"   A sequence tolerance: \"tolerance\" :   [ 4 ,   9 ]   A  Probe  tolerance: \"tolerance\" :   { \n     \"type\" :   \"probe\" , \n     \"name\" :   \"should-exist\" , \n     \"provider\" :   { \n         \"type\" :   \"python\" , \n         \"module\" :   \"os.path\" , \n         \"func\" :   \"exists\" , \n         \"arguments\" :   { \n             \"path\" :   \"some/file\" \n         } \n     }  }",
            "title": "Steady State Probe Tolerance"
        },
        {
            "location": "/reference/api/experiment/#method",
            "text": "The Method describes the sequence of  Probe  and  Action  elements\nto apply. The Method is declared under  method  property at the top-level of the\nexperiment.  The  method  MUST have at least one element but this can be either a  Probe \nor an  Action .  The elements MUST be applied in the order they are declared.",
            "title": "Method"
        },
        {
            "location": "/reference/api/experiment/#probe",
            "text": "A Probe collects information from the system during the experiment.  A Probe is a JSON object. A Probe is declared fully or reference another Probe\nthrough the  ref  property.  When declared fully, a Probe MUST declare:   a  type  property  a  name  property  a  provider  property   The  type  property MUST be the JSON string  \"probe\" .   The  name  property is a free-form JSON string that MAY be considered as an\nidentifier withing the experiment.  It MAY also declare:   a  secret  property  a  configuration  property  a  background  property   The  secret  property MUST be a JSON string referencing an identifier declared\nin the top-level  secrets   property . It is assumed that when not\ndeclared, the Probe requires no secrets.  The  configuration  property MUST be a JSON string referencing an identifier\ndeclared in the top-level  configuration   property . It is assumed that\nwhen not declared, the Probe requires no configuration.  The  background  property MUST be a JSON boolean value either  true  or  false .\nIt is assumed that, when that property is not declared, it is set to  false .\nWhen that property is set to  true  it indicates the Probe MUST not block\nand the next Action or Probe should immediatly be applied.  When a Probe references another Probe in the Experiment, the Probe MUST\ndeclare a single property called  ref .  The  ref  property MUST be a JSON string which MUST be the name of a declared\nProbe.",
            "title": "Probe"
        },
        {
            "location": "/reference/api/experiment/#action",
            "text": "An Action performs an operation against the system.  An Action collects information from the system during the experiment.  An Action is a JSON object. An Action is declared fully or reference another\nAction through the  ref  property.  When declared fully, a Action MUST declare:   a  type  property  a  name  property  a  provider  property   The  type  property MUST be the JSON string  \"action\" .   The  name  property is a free-form JSON string that MAY be considered as an\nidentifier withing the experiment.  It MAY also declare:   a  secret  property  a  configuration  property  a  background  property  a  pauses  property   The  secret  property MUST be a JSON string referencing an identifier declared\nin the top-level  secrets   property . It is assumed that when not\ndeclared, the Action requires no secrets.  The  configuration  property MUST be a JSON string referencing an identifier\ndeclared in the top-level  configuration   property . It is assumed that\nwhen not declared, the Action requires no configuration.  The  background  property MUST be a JSON boolean value either  true  or  false .\nIt is assumed that, when that property is not declared, it is set to  false .\nWhen that property is set to  true  it indicates the Action MUST not block\nand the next Action or Probe should immediatly be applied.  The  pauses  property MUST be a JSON object which MAY have one or the two\nfollowing properties:   before  after   In both cases, the value MUST be JSON number indicating the number of seconds to\nwait before continuining. The  before  pause MUST be performed before the Action\nwhile the  after  MUST be performed afterwards.  When a Action references another Action in the Experiment, the Action MUST\ndeclare a single property called  ref .  The  ref  property MUST be a JSON string which MUST be the name of a declared\nAction.",
            "title": "Action"
        },
        {
            "location": "/reference/api/experiment/#action-or-probe-provider",
            "text": "A provider MUST be a JSON object which MUST declare a  type  property that\ndecides the other expected properties.  The  type  property MUST be one of  \"python\" ,  \"http\"  or  \"process\" .",
            "title": "Action or Probe Provider"
        },
        {
            "location": "/reference/api/experiment/#python-provider",
            "text": "A Python Provider declares a Python function to be applied.  A Python Provider MUST declare the following:   a  module  property  a  func  property   It SHOULD also declare an  arguments  property when the function expects them.  The  module  property is the fully qualified module exposing the function. It\nMUST be a JSON string.  The  func  property is the name of the function to apply. It MUST be a JSON\nstring.  When provided, the  arguments  property MUST be a JSON object which\nproperties are the names of the  function\u2019s arguments . When a function\u2019s\nsignature has  default values  for some of its arguments, those MAY be\nomitted from the  arguments  object. In that case, those default values will be\nused.  Argument values MUST be valid JSON entities.",
            "title": "Python Provider"
        },
        {
            "location": "/reference/api/experiment/#http-provider",
            "text": "A HTTP Provider declares a URL to be called.  A HTTP Provider MUST declare the following:   a  url  property   The  url  property MUST be a JSON string representing a URL as per RFC 3986 .  In addition, the  provider  object MAY declare any of the followings:   a  method  property  a  headers  property  a  expected_status  property  a  arguments  property  a  timeout  property   The  method  property MUST be a JSON string, such as  \"POST\" , as per RFC 2616 . It defaults to  \"GET\" .  The  headers  property MUST be a JSON object which properties are header names\nand values are header values, as per  RFC 2616 .  The  expected_status  property MUST be a JSON number as per  RFC 2616 \ndefinining the expected HTTP response status for the Probe or Action to be\nconsidered failed or successful. It defaults to  200 .  When provided, the  arguments  property MUST be a JSON object which\nproperties are parameters of the HTTP request.  When  method  is  \"GET\" , the  arguments  are mapped as a query-string of the\nURL. Otherwise, the  arguments  are passed as the request body\u2019s data and the\nencoding depends on the  \"Content-Type\"  provided in the  headers  object.  The  timeout  property MUST be a JSON number specifying how long the request\nshould take to complete.",
            "title": "HTTP Provider"
        },
        {
            "location": "/reference/api/experiment/#process-provider",
            "text": "A Process Provider declares a process to be called.  A Process Provider MUST declare the following:   a  path  property   The  path  property MUST be a JSON string of a path to an executable.  In addition, the  provider  object MAY declare any of the followings:   a  arguments  property  a  timeout  property   The  arguments  property MUST be a JSON object which defines the process\narguments. The properties are the names and each property\u2019s value is the\nthe argument\u2019s value. An argument that does not expect a value MUST set that\nvalue to the empty string  \"\" .  The  timeout  property MUST be a JSON number specifying how long the process\nshould take to complete.",
            "title": "Process Provider"
        },
        {
            "location": "/reference/api/experiment/#rollbacks",
            "text": "Rollbacks declare the sequence of actions that attempt to put the system back\nto its initial state.  The experiment MAY declare a single  rollbacks  property which is a JSON array\nconsisting of  Actions .  A failed rollback MUST not bail the sequence of rollbacks.",
            "title": "Rollbacks"
        },
        {
            "location": "/reference/api/experiment/#secrets",
            "text": "Secrets declare values that need to be passed on to  Actions  or Probes  in a secure manner.  The  secrets  property MUST be a JSON object. Its properties are identifiers\nreferenced by  Actions  and  Probes .  The value of each identifier is a JSON object which properties are the secrets\nkeys and the properties values are the secrets values.  Referenced secrets MUST be injected into probes and actions when they are\napplied. Probes and actions MUST NOT modify the secrets.  Secrets MUST be passed a mapping of keys and values to probes and actions.  An example of a  secrets  element at the top-level:  { \n     \"secrets\" :   { \n         \"kubernetes\" :   { \n             \"token\" :   \"XYZ\" \n         } \n     }  }   This can then referenced from probes or actions:  { \n     \"type\" :   \"probe\" , \n     \"secrets\" :   \"kubernetes\"  }",
            "title": "Secrets"
        },
        {
            "location": "/reference/api/experiment/#inline-secrets",
            "text": "Secrets MAY be inlined in the  Experiment  directly.",
            "title": "Inline Secrets"
        },
        {
            "location": "/reference/api/experiment/#environment-secrets",
            "text": "Secrets MAY be retrieved from the environment. In that case, they must be\ndeclared as a JSON object with a  type  property set to  \"env\" . The\nenvironment variable MUST be declared in the  key  property as a JSON string.  { \n     \"secrets\" :   { \n         \"kubernetes\" :   { \n             \"token\" :   { \n                 \"type\" :   \"env\" , \n                 \"key\" :   \"KUBERNETES_TOKEN\" \n             } \n         } \n     }  }",
            "title": "Environment Secrets"
        },
        {
            "location": "/reference/api/experiment/#vault-secrets",
            "text": "Secrets MAY be retrieved from a  HashiCorp vault instance . In that case,\nthey must be declared as a JSON object with a  type  property set to  \"vault\" .\nThe path to the key MUST be declared in the  key  property as a JSON\nstring.  { \n     \"secrets\" :   { \n         \"myapp\" :   { \n             \"token\" :   { \n                 \"type\" :   \"vault\" , \n                 \"key\" :   \"secrets/something\" \n             } \n         } \n     }  }",
            "title": "Vault Secrets"
        },
        {
            "location": "/reference/api/experiment/#configuration",
            "text": "Configuration is meant to provide runtime values to  actions  and probes .  The  configuration  element MUST be a JSON object. The value of each property\nMUST be a JSON string or object which properties are considered the\nconfiguration lookup. Configuration must be passed to all Probes and actions\nrequring it. Probes and actions MUST NOT modify the configuration.  Configurations MUST be passed a mapping of keys and values to probes and\nactions.  An example of a  configuration  element at the top-level:  { \n     \"configuration\" :   { \n         \"some_service\" :   \"http://127.0.0.1:8080\" , \n         \"vault_addr\" :   { \n             \"type\" :   \"env\" , \n             \"key\" :   \"VAULT_ADDR\" \n         } \n     }  }",
            "title": "Configuration"
        },
        {
            "location": "/reference/api/experiment/#inline-configurations",
            "text": "Configurations MAY be inlined in the  Experiment  directly.",
            "title": "Inline Configurations"
        },
        {
            "location": "/reference/api/experiment/#environment-configurations",
            "text": "Configurations MAY be retrieved from the environment. In that case, they must be\ndeclared as a JSON object with a  type  property set to  \"env\" . The\nenvironment variable MUST be declared in the  key  property as a JSON string.  { \n     \"configuration\" :   { \n         \"vault_address\" :   { \n             \"type\" :   \"env\" , \n             \"key\" :   \"VAULT_ADDR\" \n         } \n     }  }",
            "title": "Environment Configurations"
        },
        {
            "location": "/reference/api/experiment/#variable-substitution",
            "text": "Probes and Actions argument values MAY be dynamically resolved at runtime.   Dynamic values MUST follow the syntax  ${name}  where  name  is an identifier\ndeclared in either the Configuration or Secrets sections. When  name  is\ndeclared in both sections, the Configuration section MUST take precedence.  Dynamic values MUST be substituted before being passed to Probes or Actions.  Other values, such as the HTTP Probe url, MAY be sustituted as well.",
            "title": "Variable Substitution"
        },
        {
            "location": "/reference/api/experiment/#examples",
            "text": "The following examples MUST NOT be considered normatives.",
            "title": "Examples"
        },
        {
            "location": "/reference/api/experiment/#minimal-experiment",
            "text": "Here is an example of the most minimal experiment:  { \n     \"version\" :   \"0.1.0\" , \n     \"title\" :   \"Moving a file from under our feet is forgivable\" , \n     \"description\" :   \"Our application should re-create a file that was removed\" , \n     \"steady-state-hypothesis\" :   { \n         \"title\" :   \"The file must be around first\" , \n         \"probes\" :   [ \n             { \n                 \"type\" :   \"python\" , \n                 \"name\" :   \"file-must-exist\" , \n                 \"tolerance\" :   true , \n                 \"provider\" :   { \n                     \"module\" :   \"os.path\" , \n                     \"func\" :   \"exists\" , \n                     \"arguments\" :   { \n                         \"path\" :   \"some/file\" \n                     } \n                 } \n             } \n         ] \n     }, \n     \"method\" :   [ \n         { \n             \"type\" :   \"action\" , \n             \"name\" :   \"file-be-gone\" , \n             \"provider\" :   { \n                 \"module\" :   \"os.path\" , \n                 \"func\" :   \"remove\" , \n                 \"arguments\" :   { \n                     \"path\" :   \"some/file\" \n                 } \n             }, \n             \"pauses\" :   { \n                 \"after\" :   5 \n             } \n         }, \n         { \n             \"ref\" :   \"file-must-exist\" \n         } \n     ]  }",
            "title": "Minimal Experiment"
        },
        {
            "location": "/reference/api/journal/",
            "text": "Experiment Journal\n\u00b6\n\n\nThe Journal API defines the output of an Experiment. This is by and large\nstill a work in progress.",
            "title": "Journal"
        },
        {
            "location": "/reference/api/journal/#experiment-journal",
            "text": "The Journal API defines the output of an Experiment. This is by and large\nstill a work in progress.",
            "title": "Experiment Journal"
        },
        {
            "location": "/reference/extending/approaches/",
            "text": "Extending the Chaos Toolkit\n\u00b6\n\n\nThe Chaos Toolkit is designed to be extended with new probes and actions so that\nyou can work with any failure injection and system observability systems that you choose. The toolkit has a growing number of open source extensions for just this purpose, but the intention is that you may also want to extend the Chaos Toolkit for your own unique, possible closed, systems as well.\n\n\nThe ChaosToolkit currently \nsupports\n three extension approaches:\n\n\n\n\nPython function\n\n\nProcess\n\n\nHTTP\n\n\n\n\nYou can extend your actions and probes by implementing them using one of these\napproaches.",
            "title": "Extension Approaches"
        },
        {
            "location": "/reference/extending/approaches/#extending-the-chaos-toolkit",
            "text": "The Chaos Toolkit is designed to be extended with new probes and actions so that\nyou can work with any failure injection and system observability systems that you choose. The toolkit has a growing number of open source extensions for just this purpose, but the intention is that you may also want to extend the Chaos Toolkit for your own unique, possible closed, systems as well.  The ChaosToolkit currently  supports  three extension approaches:   Python function  Process  HTTP   You can extend your actions and probes by implementing them using one of these\napproaches.",
            "title": "Extending the Chaos Toolkit"
        },
        {
            "location": "/reference/extending/extending-with-python/",
            "text": "Extending Chaos Toolkit with Python\n\u00b6\n\n\nTo create your own extension to the Chaos Toolkit using Python, a \ntemplate Python Chaos Toolkit extension project\n is available as a good starting point.\n\n\nCreate your new Chaos Toolkit extension project\n\u00b6\n\n\nTo use the Python template extension project, simply download the latest release of \nthe baseline project\n from GitHub, place this in your own new project, and make the following amendments:\n\n\n\n\nEdit the name of the project to the name of your unique extension: \n\n\nRename the package directory (\nchaosext\n in the template) \n\n\nRename the imports in the tests from \nchaosext\n to the name of your extension\u2019s package\n\n\nMake the same change across the \nREADME.md\n, the\nCHANGELOG.md\n, \npytest.ini\n and \nsetup.py\n\n\n\n\n\n\nRemove \nci.bash\n and \n.travis.yml\n as these are artifacts from the CI build system for the template only.\n\n\n\n\nWhere to put your code\n\u00b6\n\n\nThere are two extension points for a Chaos Toolkit Python extension, and they are captured in two files: \nactions.py\n and \nprobes.py\n.\n\n\nIt is conventional to use the \nactions.py\n module as the place where you expose the actions that you would like to conduct as part of your Chaos Toolkit experimental method against the environment you want to inject failure into.\n\n\nIt\u2019s also conventional to use the \nprobes.py\n module as the place where you can integrate with your system\u2019s existing \nobservability\n so that those values can be used either for an experiment\u2019s \nSteady State Hypothesis\n, or as \nsimple additional data-gathering probes\n that can be declared throughout an experiment\u2019s method.",
            "title": "Python"
        },
        {
            "location": "/reference/extending/extending-with-python/#extending-chaos-toolkit-with-python",
            "text": "To create your own extension to the Chaos Toolkit using Python, a  template Python Chaos Toolkit extension project  is available as a good starting point.",
            "title": "Extending Chaos Toolkit with Python"
        },
        {
            "location": "/reference/extending/extending-with-python/#create-your-new-chaos-toolkit-extension-project",
            "text": "To use the Python template extension project, simply download the latest release of  the baseline project  from GitHub, place this in your own new project, and make the following amendments:   Edit the name of the project to the name of your unique extension:   Rename the package directory ( chaosext  in the template)   Rename the imports in the tests from  chaosext  to the name of your extension\u2019s package  Make the same change across the  README.md , the CHANGELOG.md ,  pytest.ini  and  setup.py    Remove  ci.bash  and  .travis.yml  as these are artifacts from the CI build system for the template only.",
            "title": "Create your new Chaos Toolkit extension project"
        },
        {
            "location": "/reference/extending/extending-with-python/#where-to-put-your-code",
            "text": "There are two extension points for a Chaos Toolkit Python extension, and they are captured in two files:  actions.py  and  probes.py .  It is conventional to use the  actions.py  module as the place where you expose the actions that you would like to conduct as part of your Chaos Toolkit experimental method against the environment you want to inject failure into.  It\u2019s also conventional to use the  probes.py  module as the place where you can integrate with your system\u2019s existing  observability  so that those values can be used either for an experiment\u2019s  Steady State Hypothesis , or as  simple additional data-gathering probes  that can be declared throughout an experiment\u2019s method.",
            "title": "Where to put your code"
        },
        {
            "location": "/reference/developing/values/",
            "text": "Key Project Values\n\u00b6\n\n\nThe following key values of the Chaos Toolkit reflect the mindset the community\nhas when engineering the Chaos Toolkit project.\n\n\nSimplicity\n\u00b6\n\n\nThe Chaos Toolkit aims at being a simple piece of technology both from a user\nand developer perspective.\n\n\nTo achieve simplicity, the Chaos Toolkit comes as a command line interface\ndriven by a description file. As a user, this means no code and no need to \nlearn a programming language. As a developer, this reduces the functional\nsurface area to consider.\n\n\nExtensibility\n\u00b6\n\n\nThe Chaos Toolkit does not wish to be a monolith and strives to be extended to\nfully reach its goal through community driven efforts.\n\n\nBy using a description file, the implementation is not prescribed by the Chaos\nToolkit project. Although we fully expect the community to eventually settle on\ncertain implementations of probes and actions.\n\n\nReadability\n\u00b6\n\n\nWe believe code readbility is a factor for positive maintenance and evolutivity.\n\n\nReadable code never goes out of fashion. As the code of the Chaos Toolkit is\nmostly written in Python, best practices such as defined in \nPEP8\n.\n\n\nDiversity\n\u00b6\n\n\nAlthough not strictly speaking referring to the technological aspect of the \nproject, having diversity in the community will contribute to a better project\noverall.",
            "title": "Key Project Values"
        },
        {
            "location": "/reference/developing/values/#key-project-values",
            "text": "The following key values of the Chaos Toolkit reflect the mindset the community\nhas when engineering the Chaos Toolkit project.",
            "title": "Key Project Values"
        },
        {
            "location": "/reference/developing/values/#simplicity",
            "text": "The Chaos Toolkit aims at being a simple piece of technology both from a user\nand developer perspective.  To achieve simplicity, the Chaos Toolkit comes as a command line interface\ndriven by a description file. As a user, this means no code and no need to \nlearn a programming language. As a developer, this reduces the functional\nsurface area to consider.",
            "title": "Simplicity"
        },
        {
            "location": "/reference/developing/values/#extensibility",
            "text": "The Chaos Toolkit does not wish to be a monolith and strives to be extended to\nfully reach its goal through community driven efforts.  By using a description file, the implementation is not prescribed by the Chaos\nToolkit project. Although we fully expect the community to eventually settle on\ncertain implementations of probes and actions.",
            "title": "Extensibility"
        },
        {
            "location": "/reference/developing/values/#readability",
            "text": "We believe code readbility is a factor for positive maintenance and evolutivity.  Readable code never goes out of fashion. As the code of the Chaos Toolkit is\nmostly written in Python, best practices such as defined in  PEP8 .",
            "title": "Readability"
        },
        {
            "location": "/reference/developing/values/#diversity",
            "text": "Although not strictly speaking referring to the technological aspect of the \nproject, having diversity in the community will contribute to a better project\noverall.",
            "title": "Diversity"
        },
        {
            "location": "/reference/developing/core/",
            "text": "Core Projects\n\u00b6\n\n\nThe Chaos Toolkit is made of several projects that work together to provide its\nservice.\n\n\nchaostoolkit\n\u00b6\n\n\nThe \nchaostoolkit\n project is the command-line interface (CLI), in other words\nthe command executed by users to run their experiments.\n\n\nThat project tries to remain as shallow as possible, only providing the user\ninterface commands by gluing other projects together.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-lib\n\u00b6\n\n\nThe \nchaostoolkit-lib\n project is the core library which implements\nthe \ncore concepts\n of the Chaos Toolkit.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-documentation\n\u00b6\n\n\nThe \nchaostoolkit-documehtation\n is the documentation source and\nrenderer of the Chaos Toolkit. Namely, that project generates the website you\nare currently reading.\n\n\nThis project is implemented in Python 3 by generating HTML from Markdown\ndocuments.",
            "title": "Core Projects"
        },
        {
            "location": "/reference/developing/core/#core-projects",
            "text": "The Chaos Toolkit is made of several projects that work together to provide its\nservice.",
            "title": "Core Projects"
        },
        {
            "location": "/reference/developing/core/#chaostoolkit",
            "text": "The  chaostoolkit  project is the command-line interface (CLI), in other words\nthe command executed by users to run their experiments.  That project tries to remain as shallow as possible, only providing the user\ninterface commands by gluing other projects together.  This project is implemented in Python 3.",
            "title": "chaostoolkit"
        },
        {
            "location": "/reference/developing/core/#chaostoolkit-lib",
            "text": "The  chaostoolkit-lib  project is the core library which implements\nthe  core concepts  of the Chaos Toolkit.  This project is implemented in Python 3.",
            "title": "chaostoolkit-lib"
        },
        {
            "location": "/reference/developing/core/#chaostoolkit-documentation",
            "text": "The  chaostoolkit-documehtation  is the documentation source and\nrenderer of the Chaos Toolkit. Namely, that project generates the website you\nare currently reading.  This project is implemented in Python 3 by generating HTML from Markdown\ndocuments.",
            "title": "chaostoolkit-documentation"
        },
        {
            "location": "/reference/developing/extensions/",
            "text": "Extension Projects\n\u00b6\n\n\nIn addition to the core projects, the Chaos Toolkit manages some extension\nprojects which provide probes and/or actions for experiments.\n\n\nchaostoolkit-kubernetes\n\u00b6\n\n\nThe \nchaostoolkit-kubernetes\n project implements probes and actions\nfor experiments targetting a \nKubernetes\n cluster. Those activities\nare implemented as Python functions.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-gremlin\n\u00b6\n\n\nThe \nchaostoolkit-gremlin\n project implements actions\nfor experiments exploring resource failures (CPU, Memory, Network\u2026) in their\nsystem through the \nGremlin, Inc.\n services. Those activities\nare implemented as Python functions talking to the \nGremlin API\n.\n\n\nThis project is implemented in Python 3.\n\n\nchaostoolkit-prometheus\n\u00b6\n\n\nThe \nchaostoolkit-prometheus\n project implements probes to fetch\ninformation from your system through \nPrometheus\n. Those probes\nare implemented as Python functions talking to the \nPrometheus API\n.\n\n\nThis project is implemented in Python 3.",
            "title": "Extensions"
        },
        {
            "location": "/reference/developing/extensions/#extension-projects",
            "text": "In addition to the core projects, the Chaos Toolkit manages some extension\nprojects which provide probes and/or actions for experiments.",
            "title": "Extension Projects"
        },
        {
            "location": "/reference/developing/extensions/#chaostoolkit-kubernetes",
            "text": "The  chaostoolkit-kubernetes  project implements probes and actions\nfor experiments targetting a  Kubernetes  cluster. Those activities\nare implemented as Python functions.  This project is implemented in Python 3.",
            "title": "chaostoolkit-kubernetes"
        },
        {
            "location": "/reference/developing/extensions/#chaostoolkit-gremlin",
            "text": "The  chaostoolkit-gremlin  project implements actions\nfor experiments exploring resource failures (CPU, Memory, Network\u2026) in their\nsystem through the  Gremlin, Inc.  services. Those activities\nare implemented as Python functions talking to the  Gremlin API .  This project is implemented in Python 3.",
            "title": "chaostoolkit-gremlin"
        },
        {
            "location": "/reference/developing/extensions/#chaostoolkit-prometheus",
            "text": "The  chaostoolkit-prometheus  project implements probes to fetch\ninformation from your system through  Prometheus . Those probes\nare implemented as Python functions talking to the  Prometheus API .  This project is implemented in Python 3.",
            "title": "chaostoolkit-prometheus"
        },
        {
            "location": "/reference/developing/technologies/",
            "text": "Technology Choices\n\u00b6\n\n\nPython 3\n\u00b6\n\n\nThe Chaos Toolkit is implemented in \nPython 3\n. A high-level language with\na long successfuly story for writing great software. It\u2019s a common choice for\ntooling purpose.\n\n\nThe language supports readbility well and has a large ecosystem of libraries. It\nis also well-spread and easy to install. The choice to not support Python 2 is\na look at Python\u2019s present and future.\n\n\nThe choice for a dynamic language was also motivated because the Chaos Toolkit\nmanipulates a lot of strings and that task is made straightforward with Python.\n\n\nAlthough Python natively does not generate (though \nit can be done\n)\nstandalone binaries like \ngolang\n would. We do not believe this will harm\nthe project and hope that package managers will eventually provide native\ninstallers.\n\n\nFunctional\n\u00b6\n\n\nWell, this project is not truly a functional piece of code but the code relies\nas little as possible on stateful constructions as provided by classes.\n\n\nMutable data structures are used but mostly created and returned from functions\nrather than modified.\n\n\nGenerally speaking, the project draws inspirations from certain ideas of \n\nfunctional paradigms\n but does not enforce them strictly. One notable\narea where the code strays away from these principles is the use of exceptions\nrather than returning error codes. This may change if the community expresses\nsuch an intention.\n\n\nJSON\n\u00b6\n\n\nThe experiment description and structure is encoded using JSON. The choice for\nJSON over YAML is because it leaves less room for ambiguity and is marginally\nless readable for a structure with a shallow depth like Chaos Toolkit\nexperiments.",
            "title": "Technology Choices"
        },
        {
            "location": "/reference/developing/technologies/#technology-choices",
            "text": "",
            "title": "Technology Choices"
        },
        {
            "location": "/reference/developing/technologies/#python-3",
            "text": "The Chaos Toolkit is implemented in  Python 3 . A high-level language with\na long successfuly story for writing great software. It\u2019s a common choice for\ntooling purpose.  The language supports readbility well and has a large ecosystem of libraries. It\nis also well-spread and easy to install. The choice to not support Python 2 is\na look at Python\u2019s present and future.  The choice for a dynamic language was also motivated because the Chaos Toolkit\nmanipulates a lot of strings and that task is made straightforward with Python.  Although Python natively does not generate (though  it can be done )\nstandalone binaries like  golang  would. We do not believe this will harm\nthe project and hope that package managers will eventually provide native\ninstallers.",
            "title": "Python 3"
        },
        {
            "location": "/reference/developing/technologies/#functional",
            "text": "Well, this project is not truly a functional piece of code but the code relies\nas little as possible on stateful constructions as provided by classes.  Mutable data structures are used but mostly created and returned from functions\nrather than modified.  Generally speaking, the project draws inspirations from certain ideas of  functional paradigms  but does not enforce them strictly. One notable\narea where the code strays away from these principles is the use of exceptions\nrather than returning error codes. This may change if the community expresses\nsuch an intention.",
            "title": "Functional"
        },
        {
            "location": "/reference/developing/technologies/#json",
            "text": "The experiment description and structure is encoded using JSON. The choice for\nJSON over YAML is because it leaves less room for ambiguity and is marginally\nless readable for a structure with a shallow depth like Chaos Toolkit\nexperiments.",
            "title": "JSON"
        }
    ]
}