{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Subatomic Subatomic is a toolset designed to automate the provisioning and management of your OpenShift environment from infrastructure through to CI/CD pipelines and associated monitoring. The goals of the project are: To remove the hassle and cost of repeating the processes required to get new projects up and running from scratch to being deployed into multiple environments. To ensure projects, team and environments are provisioned and managed consistently and according to the same standards and procedures. To empower development teams to own and self manage their projects and infrastructure as completely as possible. There are many different components in the Subatomic stack but users main interaction with the system will occur through the Quantum Mechanic Slack chat client. The github project home can be found here . Getting Started Below are some links to help a user getting started with the system. User Guide - A tutorial for getting started as an end user of Subatomic. Quick Command Reference - A reference guide for using the Quantum Mechanic Slack commands. The Subatomic Stack Subatomic is built with a specific core service stack in mind. The below list details the 3rd party software required for running Subatomic. Red Hat\u00ae OpenShift is a container application platform that brings docker and Kubernetes to the enterprise\". Openshift is used to provision environments for new projects and as a home for the associated CI/CD pipelines created through Subatomic. Slack is a cloud-based set of proprietary team collaboration tools and services. Slack is the primary means for interaction with the Subatomic system through the ChatOps style Quantum Mechanic interface. It is important to note that Quantum Mechanic is built using the Atomist framework. Atomist is the automation platform for modern software delivery. Atomist provides the API for software, and a cloud service to run it, so that every company can automate delivery and give all their developers the self-service they crave. With Atomist, toil disappears, replaced by a helpful assistant that automatically fixes your common mistakes, checks your code for quality and security, and takes care of all the tedious tasks you don't want to do. Stop doing things by hand and deliver in code. Jenkins is an open source automation server written in Java. Jenkins helps to automate the non-human part of the software development process, with continuous integration and facilitating technical aspects of continuous delivery.","title":"Home"},{"location":"#getting-started","text":"Below are some links to help a user getting started with the system. User Guide - A tutorial for getting started as an end user of Subatomic. Quick Command Reference - A reference guide for using the Quantum Mechanic Slack commands.","title":"Getting Started"},{"location":"#the-subatomic-stack","text":"Subatomic is built with a specific core service stack in mind. The below list details the 3rd party software required for running Subatomic. Red Hat\u00ae OpenShift is a container application platform that brings docker and Kubernetes to the enterprise\". Openshift is used to provision environments for new projects and as a home for the associated CI/CD pipelines created through Subatomic. Slack is a cloud-based set of proprietary team collaboration tools and services. Slack is the primary means for interaction with the Subatomic system through the ChatOps style Quantum Mechanic interface. It is important to note that Quantum Mechanic is built using the Atomist framework. Atomist is the automation platform for modern software delivery. Atomist provides the API for software, and a cloud service to run it, so that every company can automate delivery and give all their developers the self-service they crave. With Atomist, toil disappears, replaced by a helpful assistant that automatically fixes your common mistakes, checks your code for quality and security, and takes care of all the tedious tasks you don't want to do. Stop doing things by hand and deliver in code. Jenkins is an open source automation server written in Java. Jenkins helps to automate the non-human part of the software development process, with continuous integration and facilitating technical aspects of continuous delivery.","title":"The Subatomic Stack"},{"location":"FAQ/","text":"Frequently Asked Questions This page tries to list common questions and solutions to related to problems users may face when using Subatomic. General These are questions that apply in general to Subatomic use. What is the difference between an application and a library? An application in Subatomic means a code base that is deployable and can be run by itself. An example would be a spring boot application, or an angular application. When linking or creating an application, all associated OpenShift resources required to deploy the application will be created along with the Jenkins build. This includes the necessary DeploymentConfig's and a BuildConfig for the application. A library on the other hand is code that is meant to be used by other codebases. An example of such would be a library of math functions that are reused by various applications. When linking or creating a library, only the Jenkins build is created. The user is expected to push the artifact from their Jenkins build into a reusable location such as Nexus for use in other applications. Common Jenkins build failures Error: Jenkins fails to pull maven dependencies. This could possibly be happening due to a mvnw file in your repo. Currently mvn wrappers are not a supported in the default jenkins build pipeline provided by Subatomic. Error: Could not determine exact tip revision. This is bug in the current version of Jenkins used. The solution involves rescanning your multibranch pipeline in Jenkins, or performing a new code commit. No commands work or I get permission errors when running commands Possibility 1: Commands are not running because the automation client or the Gluon backend is not accessible. You will need to contact your Subatomic administrator. Possibility 2: Commands in a particular team channel are failing because you are either not actually a member of the team, or you dont have the permissions to run an owner specific command. To view the list of team members and owners for a team run @atomist sub list team members . Commands Any questions related to running particular commands can be found in this section. sub onboard me Error: Failed to onboard since the member's details are already in use. When onboarding a user, it is important to have a unique username, email, and slack user. If any of these are already in use, the user needs to use different details to onboard. It is also likely that the user has already onboarded themselves and can try continue assuming that they are before trying different credentials. sub link bitbucket project Question: How do I find my Bitbucket project key? Your Bitbucket project key can be obtained from the URL to your Bitbucket project. The Bitbucket URL to your project should look similar to the following: https://bitbucket.organisation.com/projects/PROJECT_KEY/repos/browse . The characters in the location illustrated by PROJECT_KEY are the project key for the Bitbucket project.","title":"Frequently Asked Questions"},{"location":"FAQ/#frequently-asked-questions","text":"This page tries to list common questions and solutions to related to problems users may face when using Subatomic.","title":"Frequently Asked Questions"},{"location":"FAQ/#general","text":"These are questions that apply in general to Subatomic use.","title":"General"},{"location":"FAQ/#what-is-the-difference-between-an-application-and-a-library","text":"An application in Subatomic means a code base that is deployable and can be run by itself. An example would be a spring boot application, or an angular application. When linking or creating an application, all associated OpenShift resources required to deploy the application will be created along with the Jenkins build. This includes the necessary DeploymentConfig's and a BuildConfig for the application. A library on the other hand is code that is meant to be used by other codebases. An example of such would be a library of math functions that are reused by various applications. When linking or creating a library, only the Jenkins build is created. The user is expected to push the artifact from their Jenkins build into a reusable location such as Nexus for use in other applications.","title":"What is the difference between an application and a library?"},{"location":"FAQ/#common-jenkins-build-failures","text":"Error: Jenkins fails to pull maven dependencies. This could possibly be happening due to a mvnw file in your repo. Currently mvn wrappers are not a supported in the default jenkins build pipeline provided by Subatomic. Error: Could not determine exact tip revision. This is bug in the current version of Jenkins used. The solution involves rescanning your multibranch pipeline in Jenkins, or performing a new code commit.","title":"Common Jenkins build failures"},{"location":"FAQ/#no-commands-work-or-i-get-permission-errors-when-running-commands","text":"Possibility 1: Commands are not running because the automation client or the Gluon backend is not accessible. You will need to contact your Subatomic administrator. Possibility 2: Commands in a particular team channel are failing because you are either not actually a member of the team, or you dont have the permissions to run an owner specific command. To view the list of team members and owners for a team run @atomist sub list team members .","title":"No commands work or I get permission errors when running commands"},{"location":"FAQ/#commands","text":"Any questions related to running particular commands can be found in this section.","title":"Commands"},{"location":"FAQ/#sub-onboard-me","text":"Error: Failed to onboard since the member's details are already in use. When onboarding a user, it is important to have a unique username, email, and slack user. If any of these are already in use, the user needs to use different details to onboard. It is also likely that the user has already onboarded themselves and can try continue assuming that they are before trying different credentials.","title":"sub onboard me"},{"location":"FAQ/#sub-link-bitbucket-project","text":"Question: How do I find my Bitbucket project key? Your Bitbucket project key can be obtained from the URL to your Bitbucket project. The Bitbucket URL to your project should look similar to the following: https://bitbucket.organisation.com/projects/PROJECT_KEY/repos/browse . The characters in the location illustrated by PROJECT_KEY are the project key for the Bitbucket project.","title":"sub link bitbucket project"},{"location":"developer/","text":"This page will redirect in a few seconds to the Subatomic developer docs at http://subatomicdev.bison.ninja","title":"Developer Docs"},{"location":"quantum-mechanic/command-reference/","text":"Quantum Mechanic Quantum Mechanic is the interactive Slack interface of Subatomic. Below are the commands and their explanations that you'll encounter while interacting with this interface. Quick Reference The below sections have the commands grouped by functionality and with very brief explanations to help you browse them. You can use the links for the commands to navigate to the full description of what each command does. Bitbucket Commands Bitbucket commands that control Bitbucket project configuration and access controls sub apply bitbucket practices - Apply recommended practices to Bitbucket project Jenkins Commands Jenkins commands that allow the user to control builds and Jenkins configuration sub configure application jenkins prod - Add a prod deployment job to Jenkins for an application sub create jenkins default credentials - Recreate the Jenkins default credentials sub jenkins build - Kick off a Jenkins build sub project request jenkins job - Creates a Jenkins build folder for a given project Member Commands Member commands allow you to manage Subatomic members. These include editing Slack details, on-boarding, editing user roles and adding members to teams. sub add team member - Add a member to a team sub add team owner - Add a member as an owner to a team sub onboard me - The most important command, without on-boarding yourself you will not be able to run any subatomic commands. You will need to input your first name , last name , email address and domain username . Once submitted you will be able to execute subatomic commands granted you have the permission to execute them. For a detailed walk through click here . Package Commands Package commands are related to managing applications and libraries. These include deployment, build, prod promotion and image management. sub configure application jenkins prod - Add a prod deployment job to Jenkins for an application sub configure package - Configure an existing application/library using a predefined template sub configure custom package - Configure an existing application/library manually specifying all build/deployment details. sub request application prod - Create application in prod sub link application - Link an existing application sub link library - Link an existing library sub patch package s2i image - Patch the s2i image used to build a package Project Commands Project commands provide management capabilities around individual Projects and their associated resources. This includes environment management, application and library creation, Jenkins and Bitbucket configuration. sub associate team - Add additional team/s to a project sub configure project bitbucket access - Reconfigure user and system access to Bitbucket for an existing project sub apply bitbucket practices - Apply recommended practices to Bitbucket project sub request generic prod - Move OpenShift resources to prod sub create project - Create a new project. You will need to input two values project name and project description . sub request project prod - Create the OpenShift production environments for a project and a particular pipeline. sub link application - Link an existing application sub link library - Link an existing library sub link bitbucket project - You will need to input your bitbucket project key and Subatomic will find the existing project within Bitbucket. sub list projects - List projects belonging to a team sub request project environments - Create new OpenShift environments for a project sub project request jenkins job - Creates a Jenkins build folder for a given project Team Commands Team commands allow you to manage your Subatomic team. These include team membership, team projects and DevOps environment configuration. sub add config server - Add a new Subatomic Spring Cloud Config Server sub add team member - Add a member to a team sub add team owner - Add a member as an owner to a team sub associate team - Add additional team/s to a project sub create team - You will need to input two values team name and team description . This will create a team with the respective values in Subatomic. sub apply to team - Apply to join an existing team sub link team channel - If you already have an existing slack channel use this command. Subatomic will add the atomist bot to this channel, however if the channel is private you will need to manually invite the bot. sub list team members - Displays members and owners of the team. sub team migrate cloud - Move all OpenShift resources belonging to a team to a different cloud sub request devops environment - Create a DevOps environment for a selected Team. sub create team channel - This will create a public slack channel, if you want a private channel you will need to create it manually then run sub link team channel command. sub remove team member - Removes a member from a team. Other Commands All other general/miscellaneous commands sub team migrate cloud - Move all OpenShift resources belonging to a team to a different cloud sub help - Displays a help menu as a Slack browsable form of the Quick Reference section of this page. Detailed Reference This section is dedicated to explaining in detail what each command does. The subatomic environment is designed to speed up developer workflow, but it should never prevent users from using the underlying stack directly if needed or desired. The information here is put in place to help users understand exactly what is going on under the hood so that clarity is provided and manual execution of each command could be performed if desired. sub add config server This command is used to create a Spring Cloud Config server for a team. The config server is configured to point to a single repository where application configuration is pulled from. The command itself performs the following steps: The Secret subatomic-config-server is created in the teams DevOps environment. This Secret contains the ssh key configuration required by the config server to access your Bitbucket config repository. The ConfigMap subatomic-config-server is created in the teams DevOps environment. This contains the default application.yml configuration used by the config server. The subatomic-config-server ImageStream is tagged into the teams DevOps environment. The default service account is granted view rights since this is required to run the config server. The subatomic-config-server-template Template is then processed to created the necessary DeploymentConfig and Service in OpenShift. sub add team owner This is used to directly add a user to a Team you are the owner of with owner permissions. The user will need to have been on-boarded before you can add them to the Team. Adding user as an owner performs the following operations: Associate the user to the Team in the Subatomic database as an owner. Add the user to all OpenShift namespaces associated to the Team and grant them Admin permissions. Add the user to the Bitbucket projects for each Subatomic Project associated to the team. They are granted Admin rights on the Bitbucket projects. Invite the new user to the Team's slack channel. sub add team member This is used to directly add a user to a Team you are the owner of with member permissions. The user will need to have been on-boarded before you can add them to the Team. Adding user as a member performs the following operations: Associate the user to the Team in the Subatomic database as a member. Add the user to all OpenShift namespaces associated to the Team and grant them Write permissions. Add the user to the Bitbucket projects for each Subatomic Project associated to the team. Invite the new user to the Team's slack channel. sub apply bitbucket practices This will apply an opinionated set of recommended configuration settings to a Project's associated Bitbucket Project. The following is a list of the configuration that will be applied: Restrict master branch merges to only allow fast-forward merges. Restrict master branch to only allow changes through pull requests. Mark master branch as not deletable. Enables the Verify Committer hook. Enables the Required Build before merging hook. Enables the No Incomplete Tasks before merging hook. Add all owners and members of the team to the default reviewers list. sub apply to team This command allows users to send a request to a Team asking to be added as a member of that team. When executing this command, a membership request is created to the Team and Slack notification with Approve and Reject options is sent to the Team. An owner of the team needs to approve or reject this request. If the membership request is approved, the following actions are performed: Associate the user to the Team in the Subatomic database as a member. Add the user to all OpenShift namespaces associated to the Team and grant them Write permissions. Add the user to the Bitbucket projects for each Subatomic Project associated to the team. Invite the new user to the Team's slack channel. sub associate team This allows users to associate additional Teams to a Subatomic Project. Users of these associated Teams are granted permissions to all the Project source code and deployment environments. Additionally any Project notifications will be shown in the newly associated Team's Slack channel. sub configure application jenkins prod When running a Generic Prod request, all OpenShift resources in the highest non-prod environment are indiscriminately moved over to the production environments. This is just a straight copy of the resources, and does not configure any Jenkins jobs for Application production deployments. This command is used to create just the Jenkins jobs for deploying an application into production environments following such a resource copying operation. The following steps are performed in order to do this: Generate a Jenkinsfile that will be used to deploy the application into prod. The Jenkinsfile is the added to your Application repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile.[${pipelineTag}.]${environmentPostfix} where [${pipelineTag}.] is not present if the deployment's owning pipeline has no tag. Create a Jenkins build job that uses the generated Jenkinsfile to deploy your Application. The build job is also added to the Jenkins Job View which holds all the Jenkins jobs related to the Application being deployed. sub configure custom package When a Package(either an Application or Library) is created in Subatomic, there are no details captured about how it should be built or deployed. It is just a piece of metadata describing the details of a Package's name, whether it is deployable, where it's source code lives etc. The user needs to then tell Subatomic how they wish to build/deploy this Package. Running this command will prompt the user to enter the minimal details required to build or deploy the Package. This includes the following: The S2I ImageStream to use to build an Application. The OpenShift template to process in order to create the Application's OpenShift resources in each deployment environment. The default Jenkinsfile to add to the Package repository (This is the only configuration entry used for a Library). Once all of these details are specified the following actions are performed: For Applications: Configure the OpenShift portions of the Application: Create the OpenShift ImageStream in the owning Team's DevOps environment. This is where the OpenShift build pushes the built Application images to. Create the OpenShift BuildConfig in the owning Team's DevOps environment. This performs the S2I build for the Application. Process the supplied OpenShift Template to create the required deployment resources. This typically will always include an ImageStream and DeploymentConfig. Configure the Jenkins build and default deployments for the Application: Generate a Jenkinsfile that will build and deploy your application through your default pipeline. The Jenkinsfile is the added to your Application repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile . Create a Jenkins build job that uses the generated Jenkinsfile to build your Application. The build job is also added to a Jenkins Job View which holds all the Jenkins jobs related the Application being deployed. For each environment in each release pipeline in your project, configure the Jenkins deployment process: Generate a Jenkinsfile that will be used to deploy the application into the environment. The Jenkinsfile is then added to your Application repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile.[${pipelineTag}.]${environmentPostfix} where [${pipelineTag}.] is not present if the environment's owning pipeline has no tag. Create a Jenkins build job that uses the generated Jenkinsfile to promote your Application from the previous environment. The build job is also added to the Jenkins Job View which holds all the Jenkins jobs related to the Application being deployed. For Libraries: Generate a Jenkinsfile that will build your Library. This Jenkinsfile should be modified by the user to push your artifacts somewhere they can be reused from. The Jenkinsfile is then added to your Library repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile . Create a Jenkins build job that uses the generated Jenkinsfile to build your Library. sub configure package When a Package(either an Application or Library) is created in Subatomic, there are no details captured about how it should be built or deployed. It is just a piece of metadata describing the details of a Package's name, whether it is deployable, where it's source code lives etc. The user needs to then tell Subatomic how they wish to build/deploy this Package. Running this command presents the user with a prompt to decide what Package Definition to apply to the Package. A Package Definition is a preset configuration file which describes the following: The S2I ImageStream to use to build an Application. The environment variables to set during the S2I build. The OpenShift template to process in order to create the Application's OpenShift resources in each deployment environment. The environment variables to set in the Deployment Configs created in each OpenShift environment. The default Jenkinsfile to add to the Package repository (This is the only configuration entry used for a Library). The system administrators should create custom Package Definitions for the most common types of Packages used in your orginisation and these should appear in the dropdown for selection. After selecting a Package Definition to use all the information is passed through to the sub configure custom package command. To find out more about this command click here . sub configure project bitbucket access This command is used to assign the necessary permissions to a Project's associated Bitbucket Project. This is useful if either the Subatomic service account has lost permissions, users permissions were changed, or your repositories have been migrated to a new Bitbucket instance. In particular the following permissions are set up: Give the Subatomic service account admin permissions. Give Team owners admin permissions. Give Team members write permissions. sub create jenkins default credentials This will recreate the default credentials used by Jenkins. This can be run if the Bitbucket Service Account credentials have changed or if the Jenkins credentials are generally out of date. In particular this creates the following credentials: Bitbucket Credentials - Used to access Bitbucket. Nexus - Stores the URL of the Nexus instance to use for builds. Docker - Stores the Docker registry url used to specify locations of images that Jenkins uses (e.g. Jenkins agent images) Shared Resources Namespace - Stores the name of the Subatomic shared resource OpenShift namespace. This is used to know which namespace to look for centralised images in. Maven - This is the default Maven settings used in Maven builds. Production Access Tokens - This is the service account tokens used to access production environments. These are only created if a project associated to the team has been promoted to prod. sub create project This command can be used to create a new Subatomic Project associated to a particular Team. This just creates the metadata representation of the project within the Subatomic database. After creating a Project, you will need to associate it to a Bitbucket Project which you should be prompted for. More information about associating a Subatomic Project to a Bitbucket project can be found here . Once the Project has been fully defined, this captured metadata can then be used as the input into 'templates' that create things such as new OpenShift environments , or Jenkins build jobs . sub create team This command can be used to create a new Subatomic Team. This only creates the metadata model of the Team in the Subatomic database. This can then be used as the base to create a DevOps environment and create new Project's under. Note: When creating a new team, the user that executes the command will be made the owner of this Team. sub create team channel This command will create a Slack channel with the supplied name and assign it as the Team's associated Subatomic Slack channel. The following actions are performed when running this command: Create a Slack channel with the chosen name. Assign the Slack channel to the Team's associated Subatomic slack channel in the Subatomic database. Invite the Atomist bot to the newly created Slack channel. Invite all Team owners and members to the newly created Slack channel. Note: When following the message prompts after creating a Team, the Slack channel will automatically be created using the Team's name in kebab case format. sub help Displays a help menu as a Slack browsable form of the Quick Reference section of this page. sub jenkins build This will kick off a Jenkins dev pipeline build for a selected application. That is it will run the build associated to the standard Jenkinsfile for an Application, and not the additional deployment jobs associated to the Application. sub link application This will prompt a user for details about an Application they wish to allow Subatomic to manage. This will require an existing initialised repository in the Bitbucket project associated to the Application's intended owning Subatomic Project. This creates the metadata representation of the Application within the Subatomic database. Once the Application has been created the user needs to decide how Subatomic should treat the Application. See sub configure package for more details. sub link bitbucket project When creating a Project in Subatomic, the Subatomic Project needs to be associated to a Bitbucket project. This command is used to do this linking. In order to link the Bitbucket project to the Subatomic Project the user needs to provide the Bitbucket project key. Instructions on finding this Bitbucket project key can be found in the FAQ . sub link library This will prompt a user for details about a Library they wish to allow Subatomic to manage. This will require an existing initialised repository in the Bitbucket project associated to the Application's intended owning Subatomic Project. This creates the metadata representation of the Library within the Subatomic database. Once the Library has been created the user needs to decide how Subatomic should treat the Library. See sub configure package for more details. sub link team channel This command allows a user to link their Team to a new Slack channel for notification purposes. The Slack channel needs to exist for this command to work correctly. This is particularly useful if the currently associated Team channel was renamed, if you want to use a private slack channel(*) for the team notifications, or if you have an existing channel you wish to use for the notifications and Subatomic control flow interaction. When linking a Team to a new Slack channel the following actions are performed: 1. Invite the Members of the Team to the Slack channel. 2. Invite the Atomist Bot to the Team Channel. The Atomist Bot should present a generic message about creating a DevOps environment whenever it joins a new channel that is associated to a Team. *Note: If you want to use a private Slack channel, the Atomist bot cannot be invited automatically. You will need to manually invite the bot the to channel using \\invite @Atomist once you have linked the Team to the Slack channel. sub list projects This command is used to provide users a way to view the details around what Projects are linked to a particular team. These details include the Project names and associated Bitbucket projects, along with options to drill down into each Project's associated Package details. sub list team members This will present a list of the Team owners and users. This is useful to know who can perform actions that require ownership permission. sub onboard me This is the first command any user should run. Without on-boarding yourself you will not be able to run any subatomic commands. You will need to input your first name , last name , email address and domain username . Once submitted you will be able to execute subatomic commands granted you have the permission to execute them. For a detailed walk through click here . sub patch package s2i image This looks up the latest versions of s2i ImageStream's available in the centralised resources namespace, and changes a selected Application's BuildConfig to use the updated ImageStream. sub project request jenkins job This requests a build folder for a specific project be created. This can either be useful if the build folder is deleted, or a user wants to create builds for a project without creating the OpenShift environments. The use case for the latter being when a Project only contains libraries and no deployable applications. This performs the following operations: Create the build folder for the Project. The build folder uses the Project's name to name the build folder. Create the environment name credentials within the build folder/job domain. These credentials store the OpenShift namespaces for each environment in your pipeline. E.g. \"DEV_PROJECT\" - Dev OpenShift Project, \"TZA_UAT_PROJECT\" - UAT OpenShift project for the TZA deployment pipeline. Create the Bitbucket authorization credential. This is used by Jenkins to clone sources from the configured Bitbucket instance. sub remove team member This command is used to remove a member from a Team. This action can only be performed by a Team owner. When removing a member from a team, the following actions are performed: Remove the Subatomic association between the user and the Team. Remove the user's permissions from all OpenShift namespaces associated to the Team. Remove the user's permissions from the Bitbucket project's associated to the Team. Kick the user from the Team's Slack channel. Note: Team owners can also be removed (including self removal), provided that there is currently more than 1 Team owner. sub request application prod This command can be used to request moving an Application into production. The command when run initially scans the highest non prod environment if the selected pipeline for a DeploymentConfig used by this Application. By traversing the DeploymentConfig a tree of related OpenShift resources related to this Application can be found. The types of resources included in the search are DeploymentConfigs, Services, Routes, PersistentVolumeClaims, and ImageStreams. The user is presented with the list of identified resources, and confirms they are happy to move these into the production in environments. Upon confirmation the following actions are performed: Move across all identified resources into each production environment. Generate a Jenkinsfile that will be used to deploy the application into prod. The Jenkinsfile is the added to your Application repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile.[${pipelineTag}.]${environmentPostfix} where [${pipelineTag}.] is not present if the deployment's owning pipeline has no tag. Create a Jenkins build job that uses the generated Jenkinsfile to deploy your Application. The build job is also added to the Jenkins Job View which holds all the Jenkins jobs related the Application being deployed. sub request devops environment A DevOps environment is an OpenShift namespace which acts as a shared environment for common infrastructure across all of a Team's Projects. This by default includes a Jenkins instance used to build all Applications and Libraries in a Team's associated Projects and includes all the BuildConfigs used to run the S2I builds for the Team. Additional infrastructure such as a Spring Cloud Config server or Key Cloak server would be added to the DevOps environment and shared across all Project environments. When running this command, the following actions will be performed: Create the OpenShift namespace for the Team. This will be named ${teamName}-${devops} using kebab casing. Give the DevOps environment's builder service account the system:image-puller role in the defined centralised resource namespace so that it can access the Subatomic S2I images. Apply the system admin defined default OpenShift Limits and Quota's to the new namespace. Give all Team members write permissions to the DevOps namespace. Give all Team owners admin permissions to the DevOps namespace. Create a secret bitbucket-ssh which contains the credentials required by the shared DevOps applications to access Bitbucket. Deploy an instance of Jenkins. Give the Jenkins service account the system:image-puller role in the defined centralised resource namespace so that it can access the Subatomic Jenkins agent images. Load in all the credentials required by Jenkins. More information on these credentials can be found here sub request generic prod This command can be used to request moving all OpenShift resources in a non prod environment to the production environments. This is useful for if you have created resources that are not directly associated to a Subatomic Application (like a custom deployment or build) and you are taking the Project to production for the first time. This command when run initially scans the highest non prod environment looking for all DeploymentConfigs, Services, Routes, PersistentVolumeClaims, and ImageStreams. The user is presented with the list of identified resources, and confirms they are happy to move these into the production in environments. Upon confirmation all identified resources are copied in each production environment. Note: If your project is purely Subatomic created, then the recommended process is to just use the sub request application prod command to move each application to production individually. sub request project environments After creating a Subatomic Project, a user can request that the Project have OpenShift environments provisioned for its use. When requesting these environments, if the Project has not had its build/dev and release pipelines defined, the Project will be assigned a default pipeline structure. The following actions are then performed: Configure the Project OpenShift resources: Create an OpenShift namespace created for each environment of each deployment and release pipeline associated to a Project. Assign default OpenShift Quota and Limits and apply a standard OpenShift Project namespace template to these namespaces. The default template, Quota's, and Limits, will be customised by your System Admin to meet the requirement of the organisation's space. Create a Pod Network between each OpenShift Project Namespace and the Team's DevOps namespace. This allows the Applications in the Project namespaces to access Application's in the DevOps space via service URI's (e.g. accessing the DevOps Config Server). Configure the Project in Jenkins: Create the build folder for the Project. The build folder uses the Project's name to name the build folder. Create the environment name credentials within the build folder/job domain. These credentials store the OpenShift namespaces for each environment in your pipeline. E.g. \"DEV_PROJECT\" - Dev OpenShift Project, \"TZA_UAT_PROJECT\" - UAT OpenShift project for the TZA deployment pipeline. Create the Bitbucket authorization credential. This is used by Jenkins to clone sources from the configured Bitbucket instance. sub request project prod In order to promote Applications to production, you need to have production environments available to deploy the Application's into. This command will allow users to provision these production environments for a selected Project and deployment pipeline. The process follows the following approach: Request that the Team members put their names down in a sign off process to approve that the Project is ready for production: If a user rejects the approval request, the entire Prod Request is cancelled. You need at least 3 approvals to have the Prod Request approved. If you have less that 3 team members, then instead all Team members need to approve this request. Once the request is approved the following actions are then performed A Team DevOps OpenShift namespace is created on each production cluster if it does not exists already. A Project Pipeline OpenShift namespace is created on each production cluster. A pod network is setup so that the Applications in the production Project environments can communicate with the DevOps environment services. Once a Project pipeline has been moved to production then the Applications within the Project can be setup to move into production. For more information on this look at sub request generic prod and sub request application prod . sub team migrate cloud When a Team in Subatomic is created, it is associated to a particular \"cloud\". A cloud represents a group of OpenShift clusters that are grouped into a non prod cluster, and multiple production clusters. Provided that the Subatomic deployment has been configured to use multiple \"clouds\", this command can be used to migrate a Team and all associated Projects from one cloud to another cloud. The steps in this operation are as follows: Create a new DevOps environment on the new cloud's non prod cluster. Recreate all OpenShift namespaces from all Projects associated to the Team being migrated. Copy all OpenShift resources from the original environments to the newly created OpenShift environments. This includes DeploymentConfig, Service, Route, PersistentVolumeClaim, and ImageStream resources. Recreate the Jenkins build jobs for each Application associated to the Project.","title":"Command Reference"},{"location":"quantum-mechanic/command-reference/#quantum-mechanic","text":"Quantum Mechanic is the interactive Slack interface of Subatomic. Below are the commands and their explanations that you'll encounter while interacting with this interface.","title":"Quantum Mechanic"},{"location":"quantum-mechanic/command-reference/#quick-reference","text":"The below sections have the commands grouped by functionality and with very brief explanations to help you browse them. You can use the links for the commands to navigate to the full description of what each command does.","title":"Quick Reference"},{"location":"quantum-mechanic/command-reference/#bitbucket-commands","text":"Bitbucket commands that control Bitbucket project configuration and access controls sub apply bitbucket practices - Apply recommended practices to Bitbucket project","title":"Bitbucket Commands"},{"location":"quantum-mechanic/command-reference/#jenkins-commands","text":"Jenkins commands that allow the user to control builds and Jenkins configuration sub configure application jenkins prod - Add a prod deployment job to Jenkins for an application sub create jenkins default credentials - Recreate the Jenkins default credentials sub jenkins build - Kick off a Jenkins build sub project request jenkins job - Creates a Jenkins build folder for a given project","title":"Jenkins Commands"},{"location":"quantum-mechanic/command-reference/#member-commands","text":"Member commands allow you to manage Subatomic members. These include editing Slack details, on-boarding, editing user roles and adding members to teams. sub add team member - Add a member to a team sub add team owner - Add a member as an owner to a team sub onboard me - The most important command, without on-boarding yourself you will not be able to run any subatomic commands. You will need to input your first name , last name , email address and domain username . Once submitted you will be able to execute subatomic commands granted you have the permission to execute them. For a detailed walk through click here .","title":"Member Commands"},{"location":"quantum-mechanic/command-reference/#package-commands","text":"Package commands are related to managing applications and libraries. These include deployment, build, prod promotion and image management. sub configure application jenkins prod - Add a prod deployment job to Jenkins for an application sub configure package - Configure an existing application/library using a predefined template sub configure custom package - Configure an existing application/library manually specifying all build/deployment details. sub request application prod - Create application in prod sub link application - Link an existing application sub link library - Link an existing library sub patch package s2i image - Patch the s2i image used to build a package","title":"Package Commands"},{"location":"quantum-mechanic/command-reference/#project-commands","text":"Project commands provide management capabilities around individual Projects and their associated resources. This includes environment management, application and library creation, Jenkins and Bitbucket configuration. sub associate team - Add additional team/s to a project sub configure project bitbucket access - Reconfigure user and system access to Bitbucket for an existing project sub apply bitbucket practices - Apply recommended practices to Bitbucket project sub request generic prod - Move OpenShift resources to prod sub create project - Create a new project. You will need to input two values project name and project description . sub request project prod - Create the OpenShift production environments for a project and a particular pipeline. sub link application - Link an existing application sub link library - Link an existing library sub link bitbucket project - You will need to input your bitbucket project key and Subatomic will find the existing project within Bitbucket. sub list projects - List projects belonging to a team sub request project environments - Create new OpenShift environments for a project sub project request jenkins job - Creates a Jenkins build folder for a given project","title":"Project Commands"},{"location":"quantum-mechanic/command-reference/#team-commands","text":"Team commands allow you to manage your Subatomic team. These include team membership, team projects and DevOps environment configuration. sub add config server - Add a new Subatomic Spring Cloud Config Server sub add team member - Add a member to a team sub add team owner - Add a member as an owner to a team sub associate team - Add additional team/s to a project sub create team - You will need to input two values team name and team description . This will create a team with the respective values in Subatomic. sub apply to team - Apply to join an existing team sub link team channel - If you already have an existing slack channel use this command. Subatomic will add the atomist bot to this channel, however if the channel is private you will need to manually invite the bot. sub list team members - Displays members and owners of the team. sub team migrate cloud - Move all OpenShift resources belonging to a team to a different cloud sub request devops environment - Create a DevOps environment for a selected Team. sub create team channel - This will create a public slack channel, if you want a private channel you will need to create it manually then run sub link team channel command. sub remove team member - Removes a member from a team.","title":"Team Commands"},{"location":"quantum-mechanic/command-reference/#other-commands","text":"All other general/miscellaneous commands sub team migrate cloud - Move all OpenShift resources belonging to a team to a different cloud sub help - Displays a help menu as a Slack browsable form of the Quick Reference section of this page.","title":"Other Commands"},{"location":"quantum-mechanic/command-reference/#detailed-reference","text":"This section is dedicated to explaining in detail what each command does. The subatomic environment is designed to speed up developer workflow, but it should never prevent users from using the underlying stack directly if needed or desired. The information here is put in place to help users understand exactly what is going on under the hood so that clarity is provided and manual execution of each command could be performed if desired.","title":"Detailed Reference"},{"location":"quantum-mechanic/command-reference/#sub-add-config-server","text":"This command is used to create a Spring Cloud Config server for a team. The config server is configured to point to a single repository where application configuration is pulled from. The command itself performs the following steps: The Secret subatomic-config-server is created in the teams DevOps environment. This Secret contains the ssh key configuration required by the config server to access your Bitbucket config repository. The ConfigMap subatomic-config-server is created in the teams DevOps environment. This contains the default application.yml configuration used by the config server. The subatomic-config-server ImageStream is tagged into the teams DevOps environment. The default service account is granted view rights since this is required to run the config server. The subatomic-config-server-template Template is then processed to created the necessary DeploymentConfig and Service in OpenShift.","title":"sub add config server"},{"location":"quantum-mechanic/command-reference/#sub-add-team-owner","text":"This is used to directly add a user to a Team you are the owner of with owner permissions. The user will need to have been on-boarded before you can add them to the Team. Adding user as an owner performs the following operations: Associate the user to the Team in the Subatomic database as an owner. Add the user to all OpenShift namespaces associated to the Team and grant them Admin permissions. Add the user to the Bitbucket projects for each Subatomic Project associated to the team. They are granted Admin rights on the Bitbucket projects. Invite the new user to the Team's slack channel.","title":"sub add team owner"},{"location":"quantum-mechanic/command-reference/#sub-add-team-member","text":"This is used to directly add a user to a Team you are the owner of with member permissions. The user will need to have been on-boarded before you can add them to the Team. Adding user as a member performs the following operations: Associate the user to the Team in the Subatomic database as a member. Add the user to all OpenShift namespaces associated to the Team and grant them Write permissions. Add the user to the Bitbucket projects for each Subatomic Project associated to the team. Invite the new user to the Team's slack channel.","title":"sub add team member"},{"location":"quantum-mechanic/command-reference/#sub-apply-bitbucket-practices","text":"This will apply an opinionated set of recommended configuration settings to a Project's associated Bitbucket Project. The following is a list of the configuration that will be applied: Restrict master branch merges to only allow fast-forward merges. Restrict master branch to only allow changes through pull requests. Mark master branch as not deletable. Enables the Verify Committer hook. Enables the Required Build before merging hook. Enables the No Incomplete Tasks before merging hook. Add all owners and members of the team to the default reviewers list.","title":"sub apply bitbucket practices"},{"location":"quantum-mechanic/command-reference/#sub-apply-to-team","text":"This command allows users to send a request to a Team asking to be added as a member of that team. When executing this command, a membership request is created to the Team and Slack notification with Approve and Reject options is sent to the Team. An owner of the team needs to approve or reject this request. If the membership request is approved, the following actions are performed: Associate the user to the Team in the Subatomic database as a member. Add the user to all OpenShift namespaces associated to the Team and grant them Write permissions. Add the user to the Bitbucket projects for each Subatomic Project associated to the team. Invite the new user to the Team's slack channel.","title":"sub apply to team"},{"location":"quantum-mechanic/command-reference/#sub-associate-team","text":"This allows users to associate additional Teams to a Subatomic Project. Users of these associated Teams are granted permissions to all the Project source code and deployment environments. Additionally any Project notifications will be shown in the newly associated Team's Slack channel.","title":"sub associate team"},{"location":"quantum-mechanic/command-reference/#sub-configure-application-jenkins-prod","text":"When running a Generic Prod request, all OpenShift resources in the highest non-prod environment are indiscriminately moved over to the production environments. This is just a straight copy of the resources, and does not configure any Jenkins jobs for Application production deployments. This command is used to create just the Jenkins jobs for deploying an application into production environments following such a resource copying operation. The following steps are performed in order to do this: Generate a Jenkinsfile that will be used to deploy the application into prod. The Jenkinsfile is the added to your Application repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile.[${pipelineTag}.]${environmentPostfix} where [${pipelineTag}.] is not present if the deployment's owning pipeline has no tag. Create a Jenkins build job that uses the generated Jenkinsfile to deploy your Application. The build job is also added to the Jenkins Job View which holds all the Jenkins jobs related to the Application being deployed.","title":"sub configure application jenkins prod"},{"location":"quantum-mechanic/command-reference/#sub-configure-custom-package","text":"When a Package(either an Application or Library) is created in Subatomic, there are no details captured about how it should be built or deployed. It is just a piece of metadata describing the details of a Package's name, whether it is deployable, where it's source code lives etc. The user needs to then tell Subatomic how they wish to build/deploy this Package. Running this command will prompt the user to enter the minimal details required to build or deploy the Package. This includes the following: The S2I ImageStream to use to build an Application. The OpenShift template to process in order to create the Application's OpenShift resources in each deployment environment. The default Jenkinsfile to add to the Package repository (This is the only configuration entry used for a Library). Once all of these details are specified the following actions are performed: For Applications: Configure the OpenShift portions of the Application: Create the OpenShift ImageStream in the owning Team's DevOps environment. This is where the OpenShift build pushes the built Application images to. Create the OpenShift BuildConfig in the owning Team's DevOps environment. This performs the S2I build for the Application. Process the supplied OpenShift Template to create the required deployment resources. This typically will always include an ImageStream and DeploymentConfig. Configure the Jenkins build and default deployments for the Application: Generate a Jenkinsfile that will build and deploy your application through your default pipeline. The Jenkinsfile is the added to your Application repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile . Create a Jenkins build job that uses the generated Jenkinsfile to build your Application. The build job is also added to a Jenkins Job View which holds all the Jenkins jobs related the Application being deployed. For each environment in each release pipeline in your project, configure the Jenkins deployment process: Generate a Jenkinsfile that will be used to deploy the application into the environment. The Jenkinsfile is then added to your Application repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile.[${pipelineTag}.]${environmentPostfix} where [${pipelineTag}.] is not present if the environment's owning pipeline has no tag. Create a Jenkins build job that uses the generated Jenkinsfile to promote your Application from the previous environment. The build job is also added to the Jenkins Job View which holds all the Jenkins jobs related to the Application being deployed. For Libraries: Generate a Jenkinsfile that will build your Library. This Jenkinsfile should be modified by the user to push your artifacts somewhere they can be reused from. The Jenkinsfile is then added to your Library repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile . Create a Jenkins build job that uses the generated Jenkinsfile to build your Library.","title":"sub configure custom package"},{"location":"quantum-mechanic/command-reference/#sub-configure-package","text":"When a Package(either an Application or Library) is created in Subatomic, there are no details captured about how it should be built or deployed. It is just a piece of metadata describing the details of a Package's name, whether it is deployable, where it's source code lives etc. The user needs to then tell Subatomic how they wish to build/deploy this Package. Running this command presents the user with a prompt to decide what Package Definition to apply to the Package. A Package Definition is a preset configuration file which describes the following: The S2I ImageStream to use to build an Application. The environment variables to set during the S2I build. The OpenShift template to process in order to create the Application's OpenShift resources in each deployment environment. The environment variables to set in the Deployment Configs created in each OpenShift environment. The default Jenkinsfile to add to the Package repository (This is the only configuration entry used for a Library). The system administrators should create custom Package Definitions for the most common types of Packages used in your orginisation and these should appear in the dropdown for selection. After selecting a Package Definition to use all the information is passed through to the sub configure custom package command. To find out more about this command click here .","title":"sub configure package"},{"location":"quantum-mechanic/command-reference/#sub-configure-project-bitbucket-access","text":"This command is used to assign the necessary permissions to a Project's associated Bitbucket Project. This is useful if either the Subatomic service account has lost permissions, users permissions were changed, or your repositories have been migrated to a new Bitbucket instance. In particular the following permissions are set up: Give the Subatomic service account admin permissions. Give Team owners admin permissions. Give Team members write permissions.","title":"sub configure project bitbucket access"},{"location":"quantum-mechanic/command-reference/#sub-create-jenkins-default-credentials","text":"This will recreate the default credentials used by Jenkins. This can be run if the Bitbucket Service Account credentials have changed or if the Jenkins credentials are generally out of date. In particular this creates the following credentials: Bitbucket Credentials - Used to access Bitbucket. Nexus - Stores the URL of the Nexus instance to use for builds. Docker - Stores the Docker registry url used to specify locations of images that Jenkins uses (e.g. Jenkins agent images) Shared Resources Namespace - Stores the name of the Subatomic shared resource OpenShift namespace. This is used to know which namespace to look for centralised images in. Maven - This is the default Maven settings used in Maven builds. Production Access Tokens - This is the service account tokens used to access production environments. These are only created if a project associated to the team has been promoted to prod.","title":"sub create jenkins default credentials"},{"location":"quantum-mechanic/command-reference/#sub-create-project","text":"This command can be used to create a new Subatomic Project associated to a particular Team. This just creates the metadata representation of the project within the Subatomic database. After creating a Project, you will need to associate it to a Bitbucket Project which you should be prompted for. More information about associating a Subatomic Project to a Bitbucket project can be found here . Once the Project has been fully defined, this captured metadata can then be used as the input into 'templates' that create things such as new OpenShift environments , or Jenkins build jobs .","title":"sub create project"},{"location":"quantum-mechanic/command-reference/#sub-create-team","text":"This command can be used to create a new Subatomic Team. This only creates the metadata model of the Team in the Subatomic database. This can then be used as the base to create a DevOps environment and create new Project's under. Note: When creating a new team, the user that executes the command will be made the owner of this Team.","title":"sub create team"},{"location":"quantum-mechanic/command-reference/#sub-create-team-channel","text":"This command will create a Slack channel with the supplied name and assign it as the Team's associated Subatomic Slack channel. The following actions are performed when running this command: Create a Slack channel with the chosen name. Assign the Slack channel to the Team's associated Subatomic slack channel in the Subatomic database. Invite the Atomist bot to the newly created Slack channel. Invite all Team owners and members to the newly created Slack channel. Note: When following the message prompts after creating a Team, the Slack channel will automatically be created using the Team's name in kebab case format.","title":"sub create team channel"},{"location":"quantum-mechanic/command-reference/#sub-help","text":"Displays a help menu as a Slack browsable form of the Quick Reference section of this page.","title":"sub help"},{"location":"quantum-mechanic/command-reference/#sub-jenkins-build","text":"This will kick off a Jenkins dev pipeline build for a selected application. That is it will run the build associated to the standard Jenkinsfile for an Application, and not the additional deployment jobs associated to the Application.","title":"sub jenkins build"},{"location":"quantum-mechanic/command-reference/#sub-link-application","text":"This will prompt a user for details about an Application they wish to allow Subatomic to manage. This will require an existing initialised repository in the Bitbucket project associated to the Application's intended owning Subatomic Project. This creates the metadata representation of the Application within the Subatomic database. Once the Application has been created the user needs to decide how Subatomic should treat the Application. See sub configure package for more details.","title":"sub link application"},{"location":"quantum-mechanic/command-reference/#sub-link-bitbucket-project","text":"When creating a Project in Subatomic, the Subatomic Project needs to be associated to a Bitbucket project. This command is used to do this linking. In order to link the Bitbucket project to the Subatomic Project the user needs to provide the Bitbucket project key. Instructions on finding this Bitbucket project key can be found in the FAQ .","title":"sub link bitbucket project"},{"location":"quantum-mechanic/command-reference/#sub-link-library","text":"This will prompt a user for details about a Library they wish to allow Subatomic to manage. This will require an existing initialised repository in the Bitbucket project associated to the Application's intended owning Subatomic Project. This creates the metadata representation of the Library within the Subatomic database. Once the Library has been created the user needs to decide how Subatomic should treat the Library. See sub configure package for more details.","title":"sub link library"},{"location":"quantum-mechanic/command-reference/#sub-link-team-channel","text":"This command allows a user to link their Team to a new Slack channel for notification purposes. The Slack channel needs to exist for this command to work correctly. This is particularly useful if the currently associated Team channel was renamed, if you want to use a private slack channel(*) for the team notifications, or if you have an existing channel you wish to use for the notifications and Subatomic control flow interaction. When linking a Team to a new Slack channel the following actions are performed: 1. Invite the Members of the Team to the Slack channel. 2. Invite the Atomist Bot to the Team Channel. The Atomist Bot should present a generic message about creating a DevOps environment whenever it joins a new channel that is associated to a Team. *Note: If you want to use a private Slack channel, the Atomist bot cannot be invited automatically. You will need to manually invite the bot the to channel using \\invite @Atomist once you have linked the Team to the Slack channel.","title":"sub link team channel"},{"location":"quantum-mechanic/command-reference/#sub-list-projects","text":"This command is used to provide users a way to view the details around what Projects are linked to a particular team. These details include the Project names and associated Bitbucket projects, along with options to drill down into each Project's associated Package details.","title":"sub list projects"},{"location":"quantum-mechanic/command-reference/#sub-list-team-members","text":"This will present a list of the Team owners and users. This is useful to know who can perform actions that require ownership permission.","title":"sub list team members"},{"location":"quantum-mechanic/command-reference/#sub-onboard-me","text":"This is the first command any user should run. Without on-boarding yourself you will not be able to run any subatomic commands. You will need to input your first name , last name , email address and domain username . Once submitted you will be able to execute subatomic commands granted you have the permission to execute them. For a detailed walk through click here .","title":"sub onboard me"},{"location":"quantum-mechanic/command-reference/#sub-patch-package-s2i-image","text":"This looks up the latest versions of s2i ImageStream's available in the centralised resources namespace, and changes a selected Application's BuildConfig to use the updated ImageStream.","title":"sub patch package s2i image"},{"location":"quantum-mechanic/command-reference/#sub-project-request-jenkins-job","text":"This requests a build folder for a specific project be created. This can either be useful if the build folder is deleted, or a user wants to create builds for a project without creating the OpenShift environments. The use case for the latter being when a Project only contains libraries and no deployable applications. This performs the following operations: Create the build folder for the Project. The build folder uses the Project's name to name the build folder. Create the environment name credentials within the build folder/job domain. These credentials store the OpenShift namespaces for each environment in your pipeline. E.g. \"DEV_PROJECT\" - Dev OpenShift Project, \"TZA_UAT_PROJECT\" - UAT OpenShift project for the TZA deployment pipeline. Create the Bitbucket authorization credential. This is used by Jenkins to clone sources from the configured Bitbucket instance.","title":"sub project request jenkins job"},{"location":"quantum-mechanic/command-reference/#sub-remove-team-member","text":"This command is used to remove a member from a Team. This action can only be performed by a Team owner. When removing a member from a team, the following actions are performed: Remove the Subatomic association between the user and the Team. Remove the user's permissions from all OpenShift namespaces associated to the Team. Remove the user's permissions from the Bitbucket project's associated to the Team. Kick the user from the Team's Slack channel. Note: Team owners can also be removed (including self removal), provided that there is currently more than 1 Team owner.","title":"sub remove team member"},{"location":"quantum-mechanic/command-reference/#sub-request-application-prod","text":"This command can be used to request moving an Application into production. The command when run initially scans the highest non prod environment if the selected pipeline for a DeploymentConfig used by this Application. By traversing the DeploymentConfig a tree of related OpenShift resources related to this Application can be found. The types of resources included in the search are DeploymentConfigs, Services, Routes, PersistentVolumeClaims, and ImageStreams. The user is presented with the list of identified resources, and confirms they are happy to move these into the production in environments. Upon confirmation the following actions are performed: Move across all identified resources into each production environment. Generate a Jenkinsfile that will be used to deploy the application into prod. The Jenkinsfile is the added to your Application repository if it does not exist. The name of the Jenkinsfile is Jenkinsfile.[${pipelineTag}.]${environmentPostfix} where [${pipelineTag}.] is not present if the deployment's owning pipeline has no tag. Create a Jenkins build job that uses the generated Jenkinsfile to deploy your Application. The build job is also added to the Jenkins Job View which holds all the Jenkins jobs related the Application being deployed.","title":"sub request application prod"},{"location":"quantum-mechanic/command-reference/#sub-request-devops-environment","text":"A DevOps environment is an OpenShift namespace which acts as a shared environment for common infrastructure across all of a Team's Projects. This by default includes a Jenkins instance used to build all Applications and Libraries in a Team's associated Projects and includes all the BuildConfigs used to run the S2I builds for the Team. Additional infrastructure such as a Spring Cloud Config server or Key Cloak server would be added to the DevOps environment and shared across all Project environments. When running this command, the following actions will be performed: Create the OpenShift namespace for the Team. This will be named ${teamName}-${devops} using kebab casing. Give the DevOps environment's builder service account the system:image-puller role in the defined centralised resource namespace so that it can access the Subatomic S2I images. Apply the system admin defined default OpenShift Limits and Quota's to the new namespace. Give all Team members write permissions to the DevOps namespace. Give all Team owners admin permissions to the DevOps namespace. Create a secret bitbucket-ssh which contains the credentials required by the shared DevOps applications to access Bitbucket. Deploy an instance of Jenkins. Give the Jenkins service account the system:image-puller role in the defined centralised resource namespace so that it can access the Subatomic Jenkins agent images. Load in all the credentials required by Jenkins. More information on these credentials can be found here","title":"sub request devops environment"},{"location":"quantum-mechanic/command-reference/#sub-request-generic-prod","text":"This command can be used to request moving all OpenShift resources in a non prod environment to the production environments. This is useful for if you have created resources that are not directly associated to a Subatomic Application (like a custom deployment or build) and you are taking the Project to production for the first time. This command when run initially scans the highest non prod environment looking for all DeploymentConfigs, Services, Routes, PersistentVolumeClaims, and ImageStreams. The user is presented with the list of identified resources, and confirms they are happy to move these into the production in environments. Upon confirmation all identified resources are copied in each production environment. Note: If your project is purely Subatomic created, then the recommended process is to just use the sub request application prod command to move each application to production individually.","title":"sub request generic prod"},{"location":"quantum-mechanic/command-reference/#sub-request-project-environments","text":"After creating a Subatomic Project, a user can request that the Project have OpenShift environments provisioned for its use. When requesting these environments, if the Project has not had its build/dev and release pipelines defined, the Project will be assigned a default pipeline structure. The following actions are then performed: Configure the Project OpenShift resources: Create an OpenShift namespace created for each environment of each deployment and release pipeline associated to a Project. Assign default OpenShift Quota and Limits and apply a standard OpenShift Project namespace template to these namespaces. The default template, Quota's, and Limits, will be customised by your System Admin to meet the requirement of the organisation's space. Create a Pod Network between each OpenShift Project Namespace and the Team's DevOps namespace. This allows the Applications in the Project namespaces to access Application's in the DevOps space via service URI's (e.g. accessing the DevOps Config Server). Configure the Project in Jenkins: Create the build folder for the Project. The build folder uses the Project's name to name the build folder. Create the environment name credentials within the build folder/job domain. These credentials store the OpenShift namespaces for each environment in your pipeline. E.g. \"DEV_PROJECT\" - Dev OpenShift Project, \"TZA_UAT_PROJECT\" - UAT OpenShift project for the TZA deployment pipeline. Create the Bitbucket authorization credential. This is used by Jenkins to clone sources from the configured Bitbucket instance.","title":"sub request project environments"},{"location":"quantum-mechanic/command-reference/#sub-request-project-prod","text":"In order to promote Applications to production, you need to have production environments available to deploy the Application's into. This command will allow users to provision these production environments for a selected Project and deployment pipeline. The process follows the following approach: Request that the Team members put their names down in a sign off process to approve that the Project is ready for production: If a user rejects the approval request, the entire Prod Request is cancelled. You need at least 3 approvals to have the Prod Request approved. If you have less that 3 team members, then instead all Team members need to approve this request. Once the request is approved the following actions are then performed A Team DevOps OpenShift namespace is created on each production cluster if it does not exists already. A Project Pipeline OpenShift namespace is created on each production cluster. A pod network is setup so that the Applications in the production Project environments can communicate with the DevOps environment services. Once a Project pipeline has been moved to production then the Applications within the Project can be setup to move into production. For more information on this look at sub request generic prod and sub request application prod .","title":"sub request project prod"},{"location":"quantum-mechanic/command-reference/#sub-team-migrate-cloud","text":"When a Team in Subatomic is created, it is associated to a particular \"cloud\". A cloud represents a group of OpenShift clusters that are grouped into a non prod cluster, and multiple production clusters. Provided that the Subatomic deployment has been configured to use multiple \"clouds\", this command can be used to migrate a Team and all associated Projects from one cloud to another cloud. The steps in this operation are as follows: Create a new DevOps environment on the new cloud's non prod cluster. Recreate all OpenShift namespaces from all Projects associated to the Team being migrated. Copy all OpenShift resources from the original environments to the newly created OpenShift environments. This includes DeploymentConfig, Service, Route, PersistentVolumeClaim, and ImageStream resources. Recreate the Jenkins build jobs for each Application associated to the Project.","title":"sub team migrate cloud"},{"location":"user-guide/add-an-application/","text":"Link an Application At this point in the guide you should have been presented with a prompt to link an existing application to your project. You should have arrived at this point through the conversational prompts presented after creating a project. Note that you can also link an existing application using the command below in your team channel @atomist sub link application For details on the use of this command please see here Below is an example of linking the existing application to your project The flow for adding an existing application is different to all the commands encounterd so far. First the prompts for an application name and description are shown. Enter these and submit them when you are satisfied with your values. Subatomic will then pull a list of all the repositories in your Bitbucket project and you can select which one holds the source for the application you wish to use. Once you have made your selection you will be informed that your application is being created. Configure Component You will be presented with button to configure your component. Upon selection you will have the option to choose which package definition to use for your project. E.g. for a springboot-1 project you would choose maven-springboot-1-deployable . Theses contain predefined definitions, if you would like to specify which components to use rather use the sub configure custom package instead. @atomist sub configure package For details on the use of this command please see here Upon completion of the configuration you will see the following type of message: Jenkins Build The application should now be provisioned and you are presented with an option to kick off a build. Note that if your application did not have a Jenkins build file, Subatomic will generate one for you and add it to your application repository. The message should look as below Start the build by choosing the presented option. The jenkins build can also be started by using the command below in your channel @atomist sub jenkins build For details on the use of this command please see here You should be notified that your application is now being built. The build is started using your Jenkins master instance in your DevOps environment. The link to your jenkins instance can be found in the DevOps environment and logging into the instance will then allow you to track/promote and deploy your builds.","title":"5. Link an Application"},{"location":"user-guide/add-an-application/#link-an-application","text":"At this point in the guide you should have been presented with a prompt to link an existing application to your project. You should have arrived at this point through the conversational prompts presented after creating a project. Note that you can also link an existing application using the command below in your team channel @atomist sub link application For details on the use of this command please see here Below is an example of linking the existing application to your project The flow for adding an existing application is different to all the commands encounterd so far. First the prompts for an application name and description are shown. Enter these and submit them when you are satisfied with your values. Subatomic will then pull a list of all the repositories in your Bitbucket project and you can select which one holds the source for the application you wish to use. Once you have made your selection you will be informed that your application is being created.","title":"Link an Application"},{"location":"user-guide/add-an-application/#configure-component","text":"You will be presented with button to configure your component. Upon selection you will have the option to choose which package definition to use for your project. E.g. for a springboot-1 project you would choose maven-springboot-1-deployable . Theses contain predefined definitions, if you would like to specify which components to use rather use the sub configure custom package instead. @atomist sub configure package For details on the use of this command please see here Upon completion of the configuration you will see the following type of message:","title":"Configure Component"},{"location":"user-guide/add-an-application/#jenkins-build","text":"The application should now be provisioned and you are presented with an option to kick off a build. Note that if your application did not have a Jenkins build file, Subatomic will generate one for you and add it to your application repository. The message should look as below Start the build by choosing the presented option. The jenkins build can also be started by using the command below in your channel @atomist sub jenkins build For details on the use of this command please see here You should be notified that your application is now being built. The build is started using your Jenkins master instance in your DevOps environment. The link to your jenkins instance can be found in the DevOps environment and logging into the instance will then allow you to track/promote and deploy your builds.","title":"Jenkins Build"},{"location":"user-guide/create-a-project/","text":"Create a Project At this point in the guide you should have been presented with a prompt to create a new project. You should have arrived at this point through the conversational prompts presented after creating your team and associated a slack channel to it. Note that project creation can also be invoked through the command run in your team channel as below @atomist sub create project For details on the use of this command please see here When talking to the Atomist bot in a channel, conversational prompts will occur in a thread. Follow the prompts and enter the necessary values for your project. An example of this is seen below Re-assign the values if necessary and submit when ready. Tenants allow projects spanning multiple bitbucket projects, teams and actual business groupings to be connected. Linking a Bitbucket Project You should now be presented with options to link a Bitbucket project to associate to the Subatomic project and an option to associate other teams to this Subatomic project. Choose the option to link an existing Bitbucket project. This can also be invoked using the command below in the channel @atomist sub link bitbucket project For details on the use of this command please see here Follow the prompts to link the bitbucket project. An example is shown below Note that the Bitbucket project key is pulled from the URL of the project. The URL shown when browsing the PROJ project above is as follows with the project key highlighted Submit the command and you should be informed once the Bitbucket project has been configured. The configuration involves giving access to all members in your team access, and setting default merge checks and default reviewers for the project. Create OpenShift Environments You should now be prompted to create the associated Openshift environments for the project Click the \"Create OpenShift environments\" button. This command can also be invoked using the command below in the team channel @atomist sub request project environments For details on the use of this command please see here When you click the \"Create OpenShift environments\" button, you will be prompted to choose the pipeline configuration for your project. The pipeline configuration defines what environments your project will have created for it in OpenShift. You are prompted with two options: Default Pipeline and Minimal Pipeline. The exact environments that each is defined by will change depending on the Subatomic system configuration. In this example the Default Pipeline will create Dev, SIT, and UAT environments, whilst the Minimal Pipeline will create only a Dev and UAT environment. Choose the Default Pipeline option. You will then be notified that your Openshift environments are being provisioned successfully. Once they are complete they should be visible in your Openshift instance. These will host all the applications within the project you have created. The environments have user permissions and quotas automatically configured for your team. Add an Application Once the project environments are provisioned you should be prompted to create a new application in the project. Choose to link an existing application and proceed to Add an Application . For details on linking an existing library see the documentation","title":"4. Create a Project"},{"location":"user-guide/create-a-project/#create-a-project","text":"At this point in the guide you should have been presented with a prompt to create a new project. You should have arrived at this point through the conversational prompts presented after creating your team and associated a slack channel to it. Note that project creation can also be invoked through the command run in your team channel as below @atomist sub create project For details on the use of this command please see here When talking to the Atomist bot in a channel, conversational prompts will occur in a thread. Follow the prompts and enter the necessary values for your project. An example of this is seen below Re-assign the values if necessary and submit when ready. Tenants allow projects spanning multiple bitbucket projects, teams and actual business groupings to be connected.","title":"Create a Project"},{"location":"user-guide/create-a-project/#linking-a-bitbucket-project","text":"You should now be presented with options to link a Bitbucket project to associate to the Subatomic project and an option to associate other teams to this Subatomic project. Choose the option to link an existing Bitbucket project. This can also be invoked using the command below in the channel @atomist sub link bitbucket project For details on the use of this command please see here Follow the prompts to link the bitbucket project. An example is shown below Note that the Bitbucket project key is pulled from the URL of the project. The URL shown when browsing the PROJ project above is as follows with the project key highlighted Submit the command and you should be informed once the Bitbucket project has been configured. The configuration involves giving access to all members in your team access, and setting default merge checks and default reviewers for the project.","title":"Linking a Bitbucket Project"},{"location":"user-guide/create-a-project/#create-openshift-environments","text":"You should now be prompted to create the associated Openshift environments for the project Click the \"Create OpenShift environments\" button. This command can also be invoked using the command below in the team channel @atomist sub request project environments For details on the use of this command please see here When you click the \"Create OpenShift environments\" button, you will be prompted to choose the pipeline configuration for your project. The pipeline configuration defines what environments your project will have created for it in OpenShift. You are prompted with two options: Default Pipeline and Minimal Pipeline. The exact environments that each is defined by will change depending on the Subatomic system configuration. In this example the Default Pipeline will create Dev, SIT, and UAT environments, whilst the Minimal Pipeline will create only a Dev and UAT environment. Choose the Default Pipeline option. You will then be notified that your Openshift environments are being provisioned successfully. Once they are complete they should be visible in your Openshift instance. These will host all the applications within the project you have created. The environments have user permissions and quotas automatically configured for your team.","title":"Create OpenShift Environments"},{"location":"user-guide/create-a-project/#add-an-application","text":"Once the project environments are provisioned you should be prompted to create a new application in the project. Choose to link an existing application and proceed to Add an Application . For details on linking an existing library see the documentation","title":"Add an Application"},{"location":"user-guide/create-a-team/","text":"Create a Team At this point in the guide you should have been presented with a prompt to create a new team. You should have arrived at this point through the conversational prompts presented after onboarding your user. Note that team creation can also be invoked through the command sub create team For details on the use of this command please see here After invoking the team creation command follow the prompts and enter the details for the team as required. Below is an example of creating a team The values entered can be modified or submitted as before. Submitting the values creates and stores a new team with nothing associated to it within the Subatomic environment. You will now be prompted to choose a cloud to create this team in. After your cloud selection the command will process and you should receive a success message. Associate/Create a Slack Channel You are now prompted to associate a slack channel to this team. Follow the prompts to link the slack channel, and choose to either create a new channel or link an existing channel to the team. Below is an example of creating a new slack channel to associate to the team. If linking an existing channel that is private you will need to manually invite the Atomist bot to the channel. A slack channel can also be created using the command sub create team channel For details on the use of this command please see here Alternatively an existing channel can also be linked using the command sub link team channel For details on the use of this command please see here The slack channel is then automatically created and the Atomist bot is invited. Create a DevOps Environment Select the channel just created in the Slack Channel menu. Below shows the welcome message sent by the Atomist bot when it joins your channel You can now provision your DevOps environment by clicking on the \"Create DevOps environment\" button. This command can also be invoked using the command (note the @atomist prefix, which is required when sending commands in a channel instead of direct messages to the atomist bot) @atomist sub request devops environment For details on the use of this command please see here A message is shown when provisioning starts and a step by step status message is shown: Once the DevOps provisioning is complete the team channel is updated with a message detailing possible next steps as seen below When the provisioning is complete your team will have a DevOps project created inside Openshift. This project hosts your jenkins master along with a possible config server that will be used by your team's applications. Permissions for all members of your team are automatically configured. Below shows an example of the Openshift DevOps project overview For this guide proceed by clicking the \"Create project\" button and proceed to Create a Project For details on adding a config server see the documentation","title":"3. Create a Team"},{"location":"user-guide/create-a-team/#create-a-team","text":"At this point in the guide you should have been presented with a prompt to create a new team. You should have arrived at this point through the conversational prompts presented after onboarding your user. Note that team creation can also be invoked through the command sub create team For details on the use of this command please see here After invoking the team creation command follow the prompts and enter the details for the team as required. Below is an example of creating a team The values entered can be modified or submitted as before. Submitting the values creates and stores a new team with nothing associated to it within the Subatomic environment. You will now be prompted to choose a cloud to create this team in. After your cloud selection the command will process and you should receive a success message.","title":"Create a Team"},{"location":"user-guide/create-a-team/#associatecreate-a-slack-channel","text":"You are now prompted to associate a slack channel to this team. Follow the prompts to link the slack channel, and choose to either create a new channel or link an existing channel to the team. Below is an example of creating a new slack channel to associate to the team. If linking an existing channel that is private you will need to manually invite the Atomist bot to the channel. A slack channel can also be created using the command sub create team channel For details on the use of this command please see here Alternatively an existing channel can also be linked using the command sub link team channel For details on the use of this command please see here The slack channel is then automatically created and the Atomist bot is invited.","title":"Associate/Create a Slack Channel"},{"location":"user-guide/create-a-team/#create-a-devops-environment","text":"Select the channel just created in the Slack Channel menu. Below shows the welcome message sent by the Atomist bot when it joins your channel You can now provision your DevOps environment by clicking on the \"Create DevOps environment\" button. This command can also be invoked using the command (note the @atomist prefix, which is required when sending commands in a channel instead of direct messages to the atomist bot) @atomist sub request devops environment For details on the use of this command please see here A message is shown when provisioning starts and a step by step status message is shown: Once the DevOps provisioning is complete the team channel is updated with a message detailing possible next steps as seen below When the provisioning is complete your team will have a DevOps project created inside Openshift. This project hosts your jenkins master along with a possible config server that will be used by your team's applications. Permissions for all members of your team are automatically configured. Below shows an example of the Openshift DevOps project overview For this guide proceed by clicking the \"Create project\" button and proceed to Create a Project For details on adding a config server see the documentation","title":"Create a DevOps Environment"},{"location":"user-guide/onboarding/","text":"User Onboarding Before doing anything on Subatomic, a user needs to be onboarded onto the system to provide context for any commands issued to Quantum Mechanic. To begin the onboarding process open a direct message slack conversation the the Atomist bot. the following command sub onboard me For details on the use of this command please see here A conversation guiding you through the requirements for onboarding your user is started. Follow the prompts and enter the details requested. Below is an example of onboarding At this point you are presented with an overview of the values you have entered. If you are happy with what you have entered either click the \"Submit\" button or respond with submit to proceed. If you wish to change a value respond with set [parameter] [value] . E.g. to change the first name of the user respond with set firstName My New First Name and then submit at the next prompt to do so. Please note that this process of submission/reassignment can be followed for all commands in subatomic. After submitting you will be presented with a prompt about joining or creating a team as seen below For the purpose of this tutorial, click the \"Create a new team\" button and proceed to the Create a Team section. If you are not a team lead and are instead joining an existing team, click the \"Apply to join a team\" button and see the related documentation .","title":"2. User Onboarding"},{"location":"user-guide/onboarding/#user-onboarding","text":"Before doing anything on Subatomic, a user needs to be onboarded onto the system to provide context for any commands issued to Quantum Mechanic. To begin the onboarding process open a direct message slack conversation the the Atomist bot. the following command sub onboard me For details on the use of this command please see here A conversation guiding you through the requirements for onboarding your user is started. Follow the prompts and enter the details requested. Below is an example of onboarding At this point you are presented with an overview of the values you have entered. If you are happy with what you have entered either click the \"Submit\" button or respond with submit to proceed. If you wish to change a value respond with set [parameter] [value] . E.g. to change the first name of the user respond with set firstName My New First Name and then submit at the next prompt to do so. Please note that this process of submission/reassignment can be followed for all commands in subatomic. After submitting you will be presented with a prompt about joining or creating a team as seen below For the purpose of this tutorial, click the \"Create a new team\" button and proceed to the Create a Team section. If you are not a team lead and are instead joining an existing team, click the \"Apply to join a team\" button and see the related documentation .","title":"User Onboarding"},{"location":"user-guide/overview/","text":"User Guide Overview A new user should follow this example guide to get started on their organizations Subatomic instance. This guide will cover the basics of getting on-boarded onto Subatomic as well as creating a first project with deployments. After covering the basic conversational work-flow as presented in this tutorial, you are encouraged to look at the detailed reference of commands available within Quantum Mechanic here . The user of this tutorial is assumed to be a team lead setting up a new team environment within subatomic. There will be side notes for basic team members and much of the tutorial should be useful to new members to understand the general use of Subatomic. Tutorial Contents User Onboarding Create a Team Create a Project Add an Application","title":"1. Overview"},{"location":"user-guide/overview/#user-guide-overview","text":"A new user should follow this example guide to get started on their organizations Subatomic instance. This guide will cover the basics of getting on-boarded onto Subatomic as well as creating a first project with deployments. After covering the basic conversational work-flow as presented in this tutorial, you are encouraged to look at the detailed reference of commands available within Quantum Mechanic here . The user of this tutorial is assumed to be a team lead setting up a new team environment within subatomic. There will be side notes for basic team members and much of the tutorial should be useful to new members to understand the general use of Subatomic.","title":"User Guide Overview"},{"location":"user-guide/overview/#tutorial-contents","text":"User Onboarding Create a Team Create a Project Add an Application","title":"Tutorial Contents"}]}