{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Subatomic Subatomic is a toolset designed to automate the provisioning and management of your OpenShift environment from infrastructure through to CI/CD pipelines and associated monitoring. The goals of the project are: To remove the hassle and cost of repeating the processes required to get new projects up and running from scratch to being deployed into multiple environments. To ensure projects, team and environments are provisioned and managed consistently and according to the same standards and procedures. To empower development teams to own and self manage their projects and infrastructure as completely as possible. There are many different components in the Subatomic stack but users main interaction with the system will occur through the Quantum Mechanic Slack chat client. The github project home can be found here . Getting Started Below are some links to help a user getting started with the system. User Guide - A tutorial for getting started as an end user of Subatomic. Quick Command Reference - A reference guide for using the Quantum Mechanic Slack commands. The Subatomic Stack Subatomic is built with a specific core service stack in mind. The below list details the 3rd party software required for running Subatomic. \" Red Hat\u00ae OpenShift is a container application platform that brings docker and Kubernetes to the enterprise\". Openshift is used to provision environments for new projects and as a home for the associated CI/CD pipelines created through Subatomic. Bitbucket is a web-based version control repository hosting service owned by Atlassian, for source code and development projects that use either Mercurial or Git revision control systems.. Subatomic's primary market is large development teams and naturally this tends towards large organizational environments. The Atlassian stack is common place in such environments and as such Bitbucket Server is currently the only supported source control system supported in Subatomic. Slack is a cloud-based set of proprietary team collaboration tools and services. Slack is the primary means for interaction with the Subatomic system through the ChatOps style Quantum Mechanic interface. It is important to note that Quantum Mechanic is built using the Atomist framework. Atomist lets you construct your delivery process in code \u2013 but not too much code. A service, a framework, and some libraries take care of the pieces that are common to every development organization. Atomist works atop your existing toolchain, adding functionality and smoothing your experience; then you\u2019re free to improve it Jenkins is an open source automation server written in Java. Jenkins helps to automate the non-human part of the software development process, with continuous integration and facilitating technical aspects of continuous delivery.","title":"Home"},{"location":"#getting-started","text":"Below are some links to help a user getting started with the system. User Guide - A tutorial for getting started as an end user of Subatomic. Quick Command Reference - A reference guide for using the Quantum Mechanic Slack commands.","title":"Getting Started"},{"location":"#the-subatomic-stack","text":"Subatomic is built with a specific core service stack in mind. The below list details the 3rd party software required for running Subatomic. \" Red Hat\u00ae OpenShift is a container application platform that brings docker and Kubernetes to the enterprise\". Openshift is used to provision environments for new projects and as a home for the associated CI/CD pipelines created through Subatomic. Bitbucket is a web-based version control repository hosting service owned by Atlassian, for source code and development projects that use either Mercurial or Git revision control systems.. Subatomic's primary market is large development teams and naturally this tends towards large organizational environments. The Atlassian stack is common place in such environments and as such Bitbucket Server is currently the only supported source control system supported in Subatomic. Slack is a cloud-based set of proprietary team collaboration tools and services. Slack is the primary means for interaction with the Subatomic system through the ChatOps style Quantum Mechanic interface. It is important to note that Quantum Mechanic is built using the Atomist framework. Atomist lets you construct your delivery process in code \u2013 but not too much code. A service, a framework, and some libraries take care of the pieces that are common to every development organization. Atomist works atop your existing toolchain, adding functionality and smoothing your experience; then you\u2019re free to improve it Jenkins is an open source automation server written in Java. Jenkins helps to automate the non-human part of the software development process, with continuous integration and facilitating technical aspects of continuous delivery.","title":"The Subatomic Stack"},{"location":"FAQ/","text":"Frequently Asked Questions This page tries to list common questions and solutions to related to problems users may face when using Subatomic. General These are questions that apply in general to Subatomic use. What is the difference between an application and a library? An application in Subatomic means a code base that is deployable and can be run by itself. An example would be a spring boot application, or an angular application. When linking or creating an application, all associated OpenShift resources required to deploy the application will be created along with the Jenkins build. This includes the necessary DeploymentConfig's and a BuildConfig for the application. A library on the other hand is code that is meant to be used by other codebases. An example of such would be a library of math functions that are reused by various applications. When linking or creating a library, only the Jenkins build is created. The user is expected to push the artifact from their Jenkins build into a reusable location such as Nexus for use in other applications. Common Jenkins build failures Error: Jenkins fails to pull maven dependencies. This could possibly be happening due to a mvnw file in your repo. Currently mvn wrappers are not a supported in the default jenkins build pipeline provided by Subatomic. Error: Could not determine exact tip revision. This is bug in the current version of Jenkins used. The solution involves rescanning your multibranch pipeline in Jenkins, or performing a new code commit. No commands work or I get permission errors when running commands Possibility 1: Commands are not running because the automation client or the Gluon backend is not accessible. You will need to contact your Subatomic administrator. Possibility 2: Commands in a particular team channel are failing because you are either not actually a member of the team, or you dont have the permissions to run an owner specific command. To view the list of team members and owners for a team run @atomist sub list team members . Commands Any questions related to running particular commands can be found in this section. sub onboard me Error: Failed to onboard since the member's details are already in use. When onboarding a user, it is important to have a unique username, email, and slack user. If any of these are already in use, the user needs to use different details to onboard. It is also likely that the user has already onboarded themselves and can try continue assuming that they are before trying different credentials. sub link bitbucket project Question: How do I find my Bitbucket project key? Your Bitbucket project key can be obtained from the URL to your Bitbucket project. The Bitbucket URL to your project should look similar to the following: https://bitbucket.organisation.com/projects/PROJECT_KEY/repos/browse . The characters in the location illustrated by PROJECT_KEY are the project key for the Bitbucket project.","title":"Developer Docs"},{"location":"FAQ/#frequently-asked-questions","text":"This page tries to list common questions and solutions to related to problems users may face when using Subatomic.","title":"Frequently Asked Questions"},{"location":"FAQ/#general","text":"These are questions that apply in general to Subatomic use.","title":"General"},{"location":"FAQ/#what-is-the-difference-between-an-application-and-a-library","text":"An application in Subatomic means a code base that is deployable and can be run by itself. An example would be a spring boot application, or an angular application. When linking or creating an application, all associated OpenShift resources required to deploy the application will be created along with the Jenkins build. This includes the necessary DeploymentConfig's and a BuildConfig for the application. A library on the other hand is code that is meant to be used by other codebases. An example of such would be a library of math functions that are reused by various applications. When linking or creating a library, only the Jenkins build is created. The user is expected to push the artifact from their Jenkins build into a reusable location such as Nexus for use in other applications.","title":"What is the difference between an application and a library?"},{"location":"FAQ/#common-jenkins-build-failures","text":"Error: Jenkins fails to pull maven dependencies. This could possibly be happening due to a mvnw file in your repo. Currently mvn wrappers are not a supported in the default jenkins build pipeline provided by Subatomic. Error: Could not determine exact tip revision. This is bug in the current version of Jenkins used. The solution involves rescanning your multibranch pipeline in Jenkins, or performing a new code commit.","title":"Common Jenkins build failures"},{"location":"FAQ/#no-commands-work-or-i-get-permission-errors-when-running-commands","text":"Possibility 1: Commands are not running because the automation client or the Gluon backend is not accessible. You will need to contact your Subatomic administrator. Possibility 2: Commands in a particular team channel are failing because you are either not actually a member of the team, or you dont have the permissions to run an owner specific command. To view the list of team members and owners for a team run @atomist sub list team members .","title":"No commands work or I get permission errors when running commands"},{"location":"FAQ/#commands","text":"Any questions related to running particular commands can be found in this section.","title":"Commands"},{"location":"FAQ/#sub-onboard-me","text":"Error: Failed to onboard since the member's details are already in use. When onboarding a user, it is important to have a unique username, email, and slack user. If any of these are already in use, the user needs to use different details to onboard. It is also likely that the user has already onboarded themselves and can try continue assuming that they are before trying different credentials.","title":"sub onboard me"},{"location":"FAQ/#sub-link-bitbucket-project","text":"Question: How do I find my Bitbucket project key? Your Bitbucket project key can be obtained from the URL to your Bitbucket project. The Bitbucket URL to your project should look similar to the following: https://bitbucket.organisation.com/projects/PROJECT_KEY/repos/browse . The characters in the location illustrated by PROJECT_KEY are the project key for the Bitbucket project.","title":"sub link bitbucket project"},{"location":"quantum-mechanic/command-reference/","text":"Quantum Mechanic Below are the commands and their explanations that you'll encounter while using Subatomic: 1. Bitbucket Commands (1) Bitbucket commands that control Bitbucket project configuration and access controls sub apply bitbucket practices - Apply recommended practices to Bitbucket project 2. Jenkins Commands (3) Jenkins commands that allow the user to control builds and jenkins configuration sub configure application jenkins prod - Add a prod deployment job to jenkins for an application sub create jenkins bitbucket credentials - Recreate the Jenkins Bitbucket Credentials sub jenkins build - Kick off a Jenkins build 3. Member Commands (4) Member commands allow you to manage Subatomic members. These include editing Slack details, on-boarding, editing user roles and adding members to teams. sub add team member - Add a member to a team sub add team owner - Add a member as an owner to a team sub add slack - Add Slack details to an existing team member sub onboard me - The most important command, without on-boarding yourself you will not be able to run any subatomic commands. You will need to input your first name , last name , email address and domain username . Once submitted you will be able to execute subatomic commands granted you have the permission to execute them. For a detailed walk through click here 4. Package Commands (6) Package commands are related to managing applications and libraries. These include deployment, build, prod promotion and image management. sub configure application jenkins prod - Add a prod deployment job to jenkins for an application sub configure package - Configure an existing application/library using a predefined template sub configure custom package - Configure an existing application/library sub request application prod - Create application in prod sub link application - Link an existing application sub patch package s2i image - Patch the s2i image used to build a package 5. Project Commands (12) Project commands provide management capabilities around individual Projects and their associated resources. This includes environment management, application and library creation, jenkins and Bitbucket configuration. sub associate team - Add additional team/s to a project sub configure project bitbucket access - Reconfigure user and system access to Bitbucket for an existing project sub apply bitbucket practices - Apply recommended practices to Bitbucket project sub request generic prod - Move OpenShift resources to prod * sub create OpenShift pvc - Create a new OpenShift Persistent Volume Claim sub create project - Create a new project. You will need to input two values project name and project description . sub request project prod - Create the OpenShift production environments for a project sub link application - Link an existing application sub link library - Link an existing library sub link bitbucket project - You will need to input your bitbucket project key and Subatomic will find the existing project within Bitbucket. sub list projects - List projects belonging to a team sub request project environments - Create new OpenShift environments for a project 6. Team Commands (14) Team commands allow you to manage your Subatomic team. These include team membership, team projects and DevOps environment configuration. sub add config server - Add a new Subatomic Config Server sub add team member - Add a member to a team sub add team owner - Add a member as an owner to a team sub associate team - Add additional team/s to a project sub create team - You will need to input two values team name and team description . This will create a team with the respective values in Subatomic. sub apply to team - Apply to join an existing team sub link team channel - If you already have an existing slack channel use this command. Subatomic will add the atomist bot to this channel, however if the channel is private you will need to manually invite the bot. sub list team members - Displays members and owners of the team. sub team migrate cloud - Move all Openshift resources belonging to a team to a different cloud sub request devops environment - Check whether to create a new OpenShift DevOps environment or use an existing one sub create team channel - This will create a public slack channel, if you want a private channel you will need to create it manually then proceed to sub link team channel . sub remove team member - Removes a member (not owner) from a team. sub tag all images - Tag all latest subatomic images to a devops environment sub tag image - Tag an individual subatomic image to a devops environment 7. Other Commands (3) All other general/miscellaneous commands sub create openshift pvc - Create a new OpenShift Persistent Volume Claim sub team migrate cloud - Move all Openshift resources belonging to a team to a different cloud sub help - Displays an interactive help menu","title":"Command Quick Reference"},{"location":"quantum-mechanic/command-reference/#quantum-mechanic","text":"Below are the commands and their explanations that you'll encounter while using Subatomic:","title":"Quantum Mechanic"},{"location":"quantum-mechanic/command-reference/#1-bitbucket-commands-1","text":"Bitbucket commands that control Bitbucket project configuration and access controls sub apply bitbucket practices - Apply recommended practices to Bitbucket project","title":"1. Bitbucket Commands (1)"},{"location":"quantum-mechanic/command-reference/#2-jenkins-commands-3","text":"Jenkins commands that allow the user to control builds and jenkins configuration sub configure application jenkins prod - Add a prod deployment job to jenkins for an application sub create jenkins bitbucket credentials - Recreate the Jenkins Bitbucket Credentials sub jenkins build - Kick off a Jenkins build","title":"2. Jenkins Commands (3)"},{"location":"quantum-mechanic/command-reference/#3-member-commands-4","text":"Member commands allow you to manage Subatomic members. These include editing Slack details, on-boarding, editing user roles and adding members to teams. sub add team member - Add a member to a team sub add team owner - Add a member as an owner to a team sub add slack - Add Slack details to an existing team member sub onboard me - The most important command, without on-boarding yourself you will not be able to run any subatomic commands. You will need to input your first name , last name , email address and domain username . Once submitted you will be able to execute subatomic commands granted you have the permission to execute them. For a detailed walk through click here","title":"3. Member Commands (4)"},{"location":"quantum-mechanic/command-reference/#4-package-commands-6","text":"Package commands are related to managing applications and libraries. These include deployment, build, prod promotion and image management. sub configure application jenkins prod - Add a prod deployment job to jenkins for an application sub configure package - Configure an existing application/library using a predefined template sub configure custom package - Configure an existing application/library sub request application prod - Create application in prod sub link application - Link an existing application sub patch package s2i image - Patch the s2i image used to build a package","title":"4. Package Commands (6)"},{"location":"quantum-mechanic/command-reference/#5-project-commands-12","text":"Project commands provide management capabilities around individual Projects and their associated resources. This includes environment management, application and library creation, jenkins and Bitbucket configuration. sub associate team - Add additional team/s to a project sub configure project bitbucket access - Reconfigure user and system access to Bitbucket for an existing project sub apply bitbucket practices - Apply recommended practices to Bitbucket project sub request generic prod - Move OpenShift resources to prod * sub create OpenShift pvc - Create a new OpenShift Persistent Volume Claim sub create project - Create a new project. You will need to input two values project name and project description . sub request project prod - Create the OpenShift production environments for a project sub link application - Link an existing application sub link library - Link an existing library sub link bitbucket project - You will need to input your bitbucket project key and Subatomic will find the existing project within Bitbucket. sub list projects - List projects belonging to a team sub request project environments - Create new OpenShift environments for a project","title":"5. Project Commands (12)"},{"location":"quantum-mechanic/command-reference/#6-team-commands-14","text":"Team commands allow you to manage your Subatomic team. These include team membership, team projects and DevOps environment configuration. sub add config server - Add a new Subatomic Config Server sub add team member - Add a member to a team sub add team owner - Add a member as an owner to a team sub associate team - Add additional team/s to a project sub create team - You will need to input two values team name and team description . This will create a team with the respective values in Subatomic. sub apply to team - Apply to join an existing team sub link team channel - If you already have an existing slack channel use this command. Subatomic will add the atomist bot to this channel, however if the channel is private you will need to manually invite the bot. sub list team members - Displays members and owners of the team. sub team migrate cloud - Move all Openshift resources belonging to a team to a different cloud sub request devops environment - Check whether to create a new OpenShift DevOps environment or use an existing one sub create team channel - This will create a public slack channel, if you want a private channel you will need to create it manually then proceed to sub link team channel . sub remove team member - Removes a member (not owner) from a team. sub tag all images - Tag all latest subatomic images to a devops environment sub tag image - Tag an individual subatomic image to a devops environment","title":"6. Team Commands (14)"},{"location":"quantum-mechanic/command-reference/#7-other-commands-3","text":"All other general/miscellaneous commands sub create openshift pvc - Create a new OpenShift Persistent Volume Claim sub team migrate cloud - Move all Openshift resources belonging to a team to a different cloud sub help - Displays an interactive help menu","title":"7. Other Commands (3)"},{"location":"user-guide/add-an-application/","text":"Link an Application At this point in the guide you should have been presented with a prompt to link an existing application to your project. You should have arrived at this point through the conversational prompts presented after creating a project. Note that you can also link an existing application using the command below in your team channel @atomist sub link application For details on the use of this command please see here Below is an example of linking the existing application to your project The flow for adding an existing application is different to all the commands encounterd so far. First the prompts for an application name and description are shown. Enter these and submit them when you are satisfied with your values. Subatomic will then pull a list of all the repositories in your Bitbucket project and you can select which one holds the source for the application you wish to use. Once you have made your selection you will be informed that your application is being created. Configure Component You will be presented with button to configure your component. Upon selection you will have the option to choose which package definition to use for your project. E.g. for a springboot-1 project you would choose maven-springboot-1-deployable . Theses contain predefined definitions, if you would like to specify which components to use rather use the sub configure custom package instead. @atomist sub configure package For details on the use of this command please see here Upon completion of the configuration you will see the following type of message: Jenkins Build The application should now be provisioned and you are presented with an option to kick off a build. Note that if your application did not have a Jenkins build file, Subatomic will generate one for you and add it to your application repository. The message should look as below Start the build by choosing the presented option. The jenkins build can also be started by using the command below in your channel @atomist sub jenkins build For details on the use of this command please see here You should be notified that your application is now being built. The build is started using your Jenkins master instance in your DevOps environment. The link to your jenkins instance can be found in the DevOps environment and logging into the instance will then allow you to track/promote and deploy your builds.","title":"5. Link an Application"},{"location":"user-guide/add-an-application/#link-an-application","text":"At this point in the guide you should have been presented with a prompt to link an existing application to your project. You should have arrived at this point through the conversational prompts presented after creating a project. Note that you can also link an existing application using the command below in your team channel @atomist sub link application For details on the use of this command please see here Below is an example of linking the existing application to your project The flow for adding an existing application is different to all the commands encounterd so far. First the prompts for an application name and description are shown. Enter these and submit them when you are satisfied with your values. Subatomic will then pull a list of all the repositories in your Bitbucket project and you can select which one holds the source for the application you wish to use. Once you have made your selection you will be informed that your application is being created.","title":"Link an Application"},{"location":"user-guide/add-an-application/#configure-component","text":"You will be presented with button to configure your component. Upon selection you will have the option to choose which package definition to use for your project. E.g. for a springboot-1 project you would choose maven-springboot-1-deployable . Theses contain predefined definitions, if you would like to specify which components to use rather use the sub configure custom package instead. @atomist sub configure package For details on the use of this command please see here Upon completion of the configuration you will see the following type of message:","title":"Configure Component"},{"location":"user-guide/add-an-application/#jenkins-build","text":"The application should now be provisioned and you are presented with an option to kick off a build. Note that if your application did not have a Jenkins build file, Subatomic will generate one for you and add it to your application repository. The message should look as below Start the build by choosing the presented option. The jenkins build can also be started by using the command below in your channel @atomist sub jenkins build For details on the use of this command please see here You should be notified that your application is now being built. The build is started using your Jenkins master instance in your DevOps environment. The link to your jenkins instance can be found in the DevOps environment and logging into the instance will then allow you to track/promote and deploy your builds.","title":"Jenkins Build"},{"location":"user-guide/create-a-project/","text":"Create a Project At this point in the guide you should have been presented with a prompt to create a new project. You should have arrived at this point through the conversational prompts presented after creating your team and associated a slack channel to it. Note that project creation can also be invoked through the command run in your team channel as below @atomist sub create project For details on the use of this command please see here When talking to the Atomist bot in a channel, conversational prompts will occur in a thread. Follow the prompts and enter the necessary values for your project. An example of this is seen below Re-assign the values if necessary and submit when ready. Tenants allow projects spanning multiple bitbucket projects, teams and actual business groupings to be connected. Linking a Bitbucket Project You should now be presented with options to link a Bitbucket project to associate to the Subatomic project and an option to associate other teams to this Subatomic project. Choose the option to link an existing Bitbucket project. This can also be invoked using the command below in the channel @atomist sub link bitbucket project For details on the use of this command please see here For details on creating a new Bitbucket project see the documentation Follow the prompts to link the bitbucket project. An example is shown below Note that the Bitbucket project key is pulled from the URL of the project. The URL shown when browsing the PROJ project above is as follows with the project key highlighted Submit the command and you should be informed once the Bitbucket project has been configured. The configuration involves giving access to all members in your team access, and setting default merge checks and default reviewers for the project. Create OpenShift Environments You should now be prompted to create the associated Openshift environments for the project Click the \"Create OpenShift environments\" button. This command can also be invoked using the command below in the team channel @atomist sub request project environments For details on the use of this command please see here You will be notified that your Openshift environments are being provisioned successfully. Once they are complete they should be visible in your Openshift instance. Currently the DEV, SIT, and UAT environments are the default and only option. These will host all the applications within the project you have created. The environments have user permissions and quotas automatically configured for your team. Add an Application Once the project environments are provisioned you should be prompted to create a new application in the project. Choose to link an existing application and proceed to Add an Application . For details on linking an existing library see the documentation","title":"4. Create a Project"},{"location":"user-guide/create-a-project/#create-a-project","text":"At this point in the guide you should have been presented with a prompt to create a new project. You should have arrived at this point through the conversational prompts presented after creating your team and associated a slack channel to it. Note that project creation can also be invoked through the command run in your team channel as below @atomist sub create project For details on the use of this command please see here When talking to the Atomist bot in a channel, conversational prompts will occur in a thread. Follow the prompts and enter the necessary values for your project. An example of this is seen below Re-assign the values if necessary and submit when ready. Tenants allow projects spanning multiple bitbucket projects, teams and actual business groupings to be connected.","title":"Create a Project"},{"location":"user-guide/create-a-project/#linking-a-bitbucket-project","text":"You should now be presented with options to link a Bitbucket project to associate to the Subatomic project and an option to associate other teams to this Subatomic project. Choose the option to link an existing Bitbucket project. This can also be invoked using the command below in the channel @atomist sub link bitbucket project For details on the use of this command please see here For details on creating a new Bitbucket project see the documentation Follow the prompts to link the bitbucket project. An example is shown below Note that the Bitbucket project key is pulled from the URL of the project. The URL shown when browsing the PROJ project above is as follows with the project key highlighted Submit the command and you should be informed once the Bitbucket project has been configured. The configuration involves giving access to all members in your team access, and setting default merge checks and default reviewers for the project.","title":"Linking a Bitbucket Project"},{"location":"user-guide/create-a-project/#create-openshift-environments","text":"You should now be prompted to create the associated Openshift environments for the project Click the \"Create OpenShift environments\" button. This command can also be invoked using the command below in the team channel @atomist sub request project environments For details on the use of this command please see here You will be notified that your Openshift environments are being provisioned successfully. Once they are complete they should be visible in your Openshift instance. Currently the DEV, SIT, and UAT environments are the default and only option. These will host all the applications within the project you have created. The environments have user permissions and quotas automatically configured for your team.","title":"Create OpenShift Environments"},{"location":"user-guide/create-a-project/#add-an-application","text":"Once the project environments are provisioned you should be prompted to create a new application in the project. Choose to link an existing application and proceed to Add an Application . For details on linking an existing library see the documentation","title":"Add an Application"},{"location":"user-guide/create-a-team/","text":"Create a Team At this point in the guide you should have been presented with a prompt to create a new team. You should have arrived at this point through the conversational prompts presented after onboarding your user. Note that team creation can also be invoked through the command sub create team For details on the use of this command please see here After invoking the team creation command follow the prompts and enter the details for the team as required. Below is an example of creating a team The values entered can be modified or submitted as before. Submitting the values creates and stores a new team with nothing associated to it within the Subatomic environment. You will now be prompted to choose a cloud to create this team in. After your cloud selection the command will process and you should receive a success message. Associate/Create a Slack Channel You are now prompted to associate a slack channel to this team. Follow the prompts to link the slack channel, and choose to either create a new channel or link an existing channel to the team. Below is an example of creating a new slack channel to associate to the team. If linking an existing channel that is private you will need to manually invite the Atomist bot to the channel. A slack channel can also be created using the command sub create team channel For details on the use of this command please see here Alternatively an existing channel can also be linked using the command sub link team channel For details on the use of this command please see here The slack channel is then automatically created and the Atomist bot is invited. Create a DevOps Environment Select the channel just created in the Slack Channel menu. Below shows the welcome message sent by the Atomist bot when it joins your channel You can now provision your DevOps environment by clicking on the \"Create DevOps environment\" button. This command can also be invoked using the command (note the @atomist prefix, which is required when sending commands in a channel instead of direct messages to the atomist bot) @atomist sub request devops environment For details on the use of this command please see here A message is shown when provisioning starts and a step by step status message is shown: Once the DevOps provisioning is complete the team channel is updated with a message detailing possible next steps as seen below When the provisioning is complete your team will have a DevOps project created inside Openshift. This project hosts your jenkins master along with a possible config server that will be used by your team's applications. Permissions for all members of your team are automatically configured. Below shows an example of the Openshift DevOps project overview For this guide proceed by clicking the \"Create project\" button and proceed to Create a Project For details on adding a config server see the documentation","title":"3. Create a Team"},{"location":"user-guide/create-a-team/#create-a-team","text":"At this point in the guide you should have been presented with a prompt to create a new team. You should have arrived at this point through the conversational prompts presented after onboarding your user. Note that team creation can also be invoked through the command sub create team For details on the use of this command please see here After invoking the team creation command follow the prompts and enter the details for the team as required. Below is an example of creating a team The values entered can be modified or submitted as before. Submitting the values creates and stores a new team with nothing associated to it within the Subatomic environment. You will now be prompted to choose a cloud to create this team in. After your cloud selection the command will process and you should receive a success message.","title":"Create a Team"},{"location":"user-guide/create-a-team/#associatecreate-a-slack-channel","text":"You are now prompted to associate a slack channel to this team. Follow the prompts to link the slack channel, and choose to either create a new channel or link an existing channel to the team. Below is an example of creating a new slack channel to associate to the team. If linking an existing channel that is private you will need to manually invite the Atomist bot to the channel. A slack channel can also be created using the command sub create team channel For details on the use of this command please see here Alternatively an existing channel can also be linked using the command sub link team channel For details on the use of this command please see here The slack channel is then automatically created and the Atomist bot is invited.","title":"Associate/Create a Slack Channel"},{"location":"user-guide/create-a-team/#create-a-devops-environment","text":"Select the channel just created in the Slack Channel menu. Below shows the welcome message sent by the Atomist bot when it joins your channel You can now provision your DevOps environment by clicking on the \"Create DevOps environment\" button. This command can also be invoked using the command (note the @atomist prefix, which is required when sending commands in a channel instead of direct messages to the atomist bot) @atomist sub request devops environment For details on the use of this command please see here A message is shown when provisioning starts and a step by step status message is shown: Once the DevOps provisioning is complete the team channel is updated with a message detailing possible next steps as seen below When the provisioning is complete your team will have a DevOps project created inside Openshift. This project hosts your jenkins master along with a possible config server that will be used by your team's applications. Permissions for all members of your team are automatically configured. Below shows an example of the Openshift DevOps project overview For this guide proceed by clicking the \"Create project\" button and proceed to Create a Project For details on adding a config server see the documentation","title":"Create a DevOps Environment"},{"location":"user-guide/onboarding/","text":"User Onboarding Before doing anything on Subatomic, a user needs to be onboarded onto the system to provide context for any commands issued to Quantum Mechanic. To begin the onboarding process open a direct message slack conversation the the Atomist bot. the following command sub onboard me For details on the use of this command please see here A conversation guiding you through the requirements for onboarding your user is started. Follow the prompts and enter the details requested. Below is an example of onboarding At this point you are presented with an overview of the values you have entered. If you are happy with what you have entered either click the \"Submit\" button or respond with submit to proceed. If you wish to change a value respond with set [parameter] [value] . E.g. to change the first name of the user respond with set firstName My New First Name and then submit at the next prompt to do so. Please note that this process of submission/reassignment can be followed for all commands in subatomic. After submitting you will be presented with a prompt about joining or creating a team as seen below For the purpose of this tutorial, click the \"Create a new team\" button and proceed to the Create a Team section. If you are not a team lead and are instead joining an existing team, click the \"Apply to join a team\" button and see the related documentation .","title":"2. User Onboarding"},{"location":"user-guide/onboarding/#user-onboarding","text":"Before doing anything on Subatomic, a user needs to be onboarded onto the system to provide context for any commands issued to Quantum Mechanic. To begin the onboarding process open a direct message slack conversation the the Atomist bot. the following command sub onboard me For details on the use of this command please see here A conversation guiding you through the requirements for onboarding your user is started. Follow the prompts and enter the details requested. Below is an example of onboarding At this point you are presented with an overview of the values you have entered. If you are happy with what you have entered either click the \"Submit\" button or respond with submit to proceed. If you wish to change a value respond with set [parameter] [value] . E.g. to change the first name of the user respond with set firstName My New First Name and then submit at the next prompt to do so. Please note that this process of submission/reassignment can be followed for all commands in subatomic. After submitting you will be presented with a prompt about joining or creating a team as seen below For the purpose of this tutorial, click the \"Create a new team\" button and proceed to the Create a Team section. If you are not a team lead and are instead joining an existing team, click the \"Apply to join a team\" button and see the related documentation .","title":"User Onboarding"},{"location":"user-guide/overview/","text":"User Guide Overview A new user should follow this example guide to get started on their organizations Subatomic instance. This guide will cover the basics of getting on-boarded onto Subatomic as well as creating a first project with deployments. After covering the basic conversational work-flow as presented in this tutorial, you are encouraged to look at the detailed reference of commands available within Quantum Mechanic here . The user of this tutorial is assumed to be a team lead setting up a new team environment within subatomic. There will be side notes for basic team members and much of the tutorial should be useful to new members to understand the general use of Subatomic. Tutorial Contents User Onboarding Create a Team Create a Project Add an Application","title":"1. Overview"},{"location":"user-guide/overview/#user-guide-overview","text":"A new user should follow this example guide to get started on their organizations Subatomic instance. This guide will cover the basics of getting on-boarded onto Subatomic as well as creating a first project with deployments. After covering the basic conversational work-flow as presented in this tutorial, you are encouraged to look at the detailed reference of commands available within Quantum Mechanic here . The user of this tutorial is assumed to be a team lead setting up a new team environment within subatomic. There will be side notes for basic team members and much of the tutorial should be useful to new members to understand the general use of Subatomic.","title":"User Guide Overview"},{"location":"user-guide/overview/#tutorial-contents","text":"User Onboarding Create a Team Create a Project Add an Application","title":"Tutorial Contents"}]}